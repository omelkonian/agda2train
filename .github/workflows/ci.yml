name: CI

# Trigger the workflow on push or pull request, but only for the master branch
on:
  schedule: [{cron: '0 0 * * *'}]
  pull_request:
  push:
    branches: [master]

jobs:
  cabal:
    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]   # macOS-latest, windows-latest
        cabal: [3.8]
        ghc:
          - 8.8.4
          - 8.10.7
          - 9.0.2
          - 9.2.5
          - 9.4.3
        include:
          - ghc: 9.4.3
            stdlib: 1.7.2 # only extract stdlib data on the latest GHC version

    steps:
    - uses: actions/checkout@v3
      if: github.event.action == 'opened' || github.event.action == 'synchronize' || github.event.ref == 'refs/heads/master'

    # Takes care of ghc and cabal. See https://github.com/haskell/actions.
    - uses: haskell-actions/setup@v2
      id: setup-haskell-cabal
      name: Setup Haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}

    # Generate a cabal.project.freeze file with all dependencies. We use the
    # hash of this as the cache key, so when a dependency changes we upload a
    # new cache.
    - name: Freeze
      run: cabal freeze

    # Cache the contents of ~/.cabal/store to avoid rebuilding dependencies for
    # every build. `restore-keys` makes it use the latest cache even if the
    # fingerprint doesn't match, so we don't need to start from scratch every
    # time a dependency changes.
    - uses: actions/cache@v3
      name: Cache ~/.cabal/store
      with:
        path:         ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
        key:          ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: ${{ runner.os }}-${{ matrix.ghc }}-

    - name: Test
      run: make test

    - name: Free disk space
      if: ${{ matrix.stdlib }}
      uses: jlumbroso/free-disk-space@main
      with:
        android: true
        dotnet: true
        haskell: false
        large-packages: false
        docker-images: true
        swap-storage: true

    - name: Extract data from the standard library
      if: ${{ matrix.stdlib }}
      env:
        STDLIB: ${{ matrix.stdlib }}
      run: |
        wget https://github.com/agda/agda-stdlib/archive/refs/tags/v$STDLIB.zip
        unzip v$STDLIB
        cd agda-stdlib-$STDLIB && cabal run GenerateEverything && cd ..
        STDLIB=./agda-stdlib-$STDLIB make stdlib
        zip stdlib-json.zip agda-stdlib-$STDLIB/json/*.json

    - name: Publish artifacts
      if: ${{ matrix.stdlib }}
      uses: actions/upload-artifact@v3
      with:
          name: stdlib-json
          path: stdlib-json.zip
