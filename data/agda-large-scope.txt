Modules
  _—[_]→_
  _—[_]→ₜ_
  _—[_]↠_
  _—[_]↠⁺_
  _—[_]↠⁺ₜ_
  _—[_]↠ₜ_
  _⁺↞[_]—_
  _⁺↞[_]—ₜ_
  _↝_
  _↝∗_
  _↞[_]—_
  _↞[_]—ₜ_
  Action
  Advertisement
  Arith
  BaseCfg
  Configuration
  Contract
  DepositType
  Induction
  Label
  Precondition
  Predicate
  TimedConfiguration
  ValidAdvertisement
  ℍ[Contract]⦅_—[_]↝_⦆⦅_⦆
  ∣SELECT
  ∣committedParticipants∣
Names
  _,_▷ᵈˢ_   : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} (xs : Ids) →
              Prelude.Lists.Indexed.Index xs →
              Id → BitML.Semantics.Action.Action Participant₁ Honest₁
  _:!_at_   : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Value →
              Id → BitML.Contracts.Types.Precondition Participant₁ Honest₁
  _:?_at_   : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Value →
              Id → BitML.Contracts.Types.Precondition Participant₁ Honest₁
  _:secret_ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Secret → BitML.Contracts.Types.Precondition Participant₁ Honest₁
  _<?ᵇ_     : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              ℤ → ℤ → Bool
  _`+_      : Arith → Arith → Arith
  _`-_      : Arith → Arith → Arith
  _`<_      : Arith → Arith → Predicate
  _`=_      : Arith → Arith → Predicate
  _`auth[_] : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              BitML.Semantics.Action.Action Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  _`—→ₜ⟨_⟩_⊢_
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {z = z₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
              {x′ y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {x = x₂
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ y′ ]— α)
              x′ →
              (x Prelude.Setoid.Core.ISetoid.≈ x₂) x′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₁ ]—
               αs)
              y →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₁ ]—
               (α ∷ αs))
              x₂
  _`—→⟨_⟩_⊢_
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {z = z₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x′ y y′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {x = x₂
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ y′ ]— α)
              x′ →
              (x Prelude.Setoid.Core.ISetoid.≈ x₂) x′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₁ ]—
               αs)
              y →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₁ ]—
               (α ∷ αs))
              x₂
  _`∧_      : Predicate → Predicate → Predicate
  _`∶_♯_    : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Secret →
              ℕ →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  _`⟨_⟩←—_⊢_
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (z₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {z′ y y′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {x = x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ y′) α
              z′ →
              (x Prelude.Setoid.Core.ISetoid.≈ z₁) z′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               (αs ∷ʳ α))
              z₁
  _`⟨_⟩←—ₜ_⊢_
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (z₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
              {z′ y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {x = x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ y′) α
              z′ →
              (x Prelude.Setoid.Core.ISetoid.≈ z₁) z′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               (αs ∷ʳ α))
              z₁
  _at_      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              (cfg₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              (time₁ : Time) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  _auth[_]  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              BitML.Semantics.Action.Action Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  _~[_]→ₜ_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁ →
              Set
  _—[_]→_   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Set
  _—[_]→ₜ_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Set
  _—[_]↛_   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Set
  _—[_]↛ₜ_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Set
  _—[_]↠_   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁))
  _—[_]↠⁺_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁))
  _—[_]↠⁺ₜ_ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁))
  _—[_]↠ₜ_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁))
  _—→_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁)
              Lvl.zero
  _—→ₜ_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁)
              Lvl.zero
  _—→ₜ⟨_⟩_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              ⦃ _ = z₁
                : Prelude.Setoid.Dec.DecSetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {x′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {y′ y
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {z = z₂
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁) →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ x′) α
              y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ y ]↠ αs)
              z₂ →
              {_ : True $ (x₁ Prelude.Setoid.Dec._.≈? x′)}
              {_ : True $ (y Prelude.Setoid.Dec._.≈? y′)} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               (α ∷ αs))
              z₂
  _—→ₜ⟨_⟩_⊢_
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
              {x′ y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {z = z₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ x′) α
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ x₁) x′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ y ]↠ αs)
              z₁ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               (α ∷ αs))
              z₁
  _—→ₜ⟨_⟩_⊢_
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
              {x′ y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {z = z₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ x′) α
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ x₁) x′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ y ]↠ αs)
              z₁ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠⁺
               (α ∷ αs))
              z₁
  _—→⟨_⟩_   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              ⦃ _ = z₁
                : Prelude.Setoid.Dec.DecSetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {x′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {y′ y
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {z = z₂
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ x′) α
              y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ y ]↠ αs)
              z₂ →
              {_ : True $ (x₁ Prelude.Setoid.Dec._.≈? x′)}
              {_ : True $ (y Prelude.Setoid.Dec._.≈? y′)} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               (α ∷ αs))
              z₂
  _—→⟨_⟩_⊢_ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x′ y y′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {z = z₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ x′) α
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ x₁) x′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ y ]↠ αs)
              z₁ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               (α ∷ αs))
              z₁
  _—→⟨_⟩_⊢_ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x′ y y′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {z = z₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ x′) α
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ x₁) x′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ y ]↠ αs)
              z₁ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠⁺
               (α ∷ αs))
              z₁
  _—↠_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _—↠⁺_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _—↠⁺ₜ_    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _—↠ₜ_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _⁺↞[_]—_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁))
  _⁺↞[_]—ₜ_ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁))
  _⁺↞—_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _⁺↞—ₜ_    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _←[_]—_   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              Prelude.Closures.LRel
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁
               , BitML.Semantics.Label.Label Participant₁ Honest₁)
              Lvl.zero
  _←[_]—ₜ_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              Prelude.Closures.LRel
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁
               , BitML.Semantics.Label.Label Participant₁ Honest₁)
              Lvl.zero
  _←—_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁)
              Lvl.zero
  _←—ₜ_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁)
              Lvl.zero
  _↔_▷⟨_,_⟩ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id →
              Id →
              Participant₁ →
              Value → BitML.Semantics.Action.Action Participant₁ Honest₁
  _↝_       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ → Set 0ℓ
  _↝∗_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ → Set 0ℓ
  _↞[_]—_   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁))
  _↞[_]—ₜ_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Set
              (Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.ℓ⊔ℓ′
               (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁))
  _↞—_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _↞—ₜ_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄ →
              Rel
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁)
              (Prelude.Setoid.Core.ISetoid.relℓ x)
  _⇒_       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  _∈ᶜ_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Rel₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  _∉ᶜ_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Rel₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  _∎        : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              (x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               `∅ᶜ)
              x₁
  _∎        : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              (x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ x₁ ]—
               `∅ᶜ)
              x₁
  _∎ₜ       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              (x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁) →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               `∅ᶜ)
              x₁
  _∎ₜ       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              (x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁) →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ x₁ ]—
               `∅ᶜ)
              x₁
  _∙        : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Set} →
              A → List A
  _∙head    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
               αs)
              Γₜ′ →
              BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁
  _∙↝∗_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Ad Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ → Set
  _∣_       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  _∣∣_      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
  _∶_♯_     : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Secret →
              ℕ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  _≈ₜ_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Set
  _≡⋯∶_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Rel₀ (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  _≢deposit : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ → Set
  _⊆ˢ_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′ Δₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs′ : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Δₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Δₜ ]↠
               αs′)
              Δₜ′ →
              Set
  _⊆ᵗʳ_     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′ Δₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs′ : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Δₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Δₜ ]↠
               αs′)
              Δₜ′ →
              Set
  _⊆ᶜ_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Rel₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  _⊈ᶜ_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Rel₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  _⊕_       : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Set} →
              A → List A → List A
  _⊸_       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Value →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              Value × BitML.Contracts.Types.Contracts Participant₁ Honest₁
  _▷_       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              BitML.Semantics.Action.Action Participant₁ Honest₁
  _▷ˢ_      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Semantics.Action.Action Participant₁ Honest₁
  _▷ᵈ_      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id →
              Participant₁ → BitML.Semantics.Action.Action Participant₁ Honest₁
  _▷⟨_,_,_⟩ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id →
              Participant₁ →
              Value → Value → BitML.Semantics.Action.Action Participant₁ Honest₁
  _⟨_⟩←—_   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              ⦃ _ = z₁
                : Prelude.Setoid.Dec.DecSetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {z′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {y′ y
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {x = x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (z₂
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ z′ ]— α)
              y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              {_ : True $ (z₂ Prelude.Setoid.Dec._.≈? z′)}
              {_ : True $ (y Prelude.Setoid.Dec._.≈? y′)} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₂ ]—
               (αs ∷ʳ α))
              x₁
  _⟨_⟩←—_⊢_ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (z₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {z′ y y′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {x = x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ z′ ]— α)
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ z₁) z′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₁ ]—
               (αs ∷ʳ α))
              x₁
  _⟨_⟩←—_⊢_ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (z₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {z′ y y′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {x = x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ z′ ]— α)
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ z₁) z′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.⁺↞[ z₁ ]—
               (αs ∷ʳ α))
              x₁
  _⟨_⟩←—ₜ_  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              ⦃ _ = z₁
                : Prelude.Setoid.Dec.DecSetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {z′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {y′ y
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {x = x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (z₂
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁) →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ z′ ]— α)
              y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              {_ : True $ (z₂ Prelude.Setoid.Dec._.≈? z′)}
              {_ : True $ (y Prelude.Setoid.Dec._.≈? y′)} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₂ ]—
               (αs ∷ʳ α))
              x₁
  _⟨_⟩←—ₜ_⊢_
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (z₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
              {z′ y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {x = x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ z′ ]— α)
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ z₁) z′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ z₁ ]—
               (αs ∷ʳ α))
              x₁
  _⟨_⟩←—ₜ_⊢_
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (z₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
              {z′ y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {x = x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.LabelledReflexiveTransitiveClosure.←[ z′ ]— α)
              y′ →
              (x Prelude.Setoid.Core.ISetoid.≈ z₁) z′ ×
              (x Prelude.Setoid.Core.ISetoid.≈ y) y′ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.⁺↞[ z₁ ]—
               (αs ∷ʳ α))
              x₁
  A         : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Participant₁
  Act       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time}
              {p
               : Prelude.Decidable.Core.auto∶
                 (BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ nothing)} →
              Prelude.InferenceRules.∙
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α Γ′
               Prelude.InferenceRules.───────────────────────
               (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
                (Γ BitML.Semantics.DecidableInference._.at t))
               α (Γ′ BitML.Semantics.DecidableInference._.at t))
  Action    : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Actions   : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  ActiveContract
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Ad        : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Advertisement
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Ancestor⦅_↝_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Ad Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              Rel₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  Arith     : Set
  A′        : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Participant₁
  B         : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Participant₁
  BaseCfg   : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  BaseCfg↝Cfg
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
              Prelude.Coercions.↝
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
  B′        : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Participant₁
  C         : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  C-Advertise
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {p₁
               : Prelude.Decidable.Core.auto∶
                 BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
                 ad}
              {p₂
               : Prelude.Decidable.Core.auto∶
                 Any
                 (λ section →
                    (setoid Participant₁ Data.List.Membership.Setoid.∈ section)
                    (BitML.Contracts.Types.Hon Participant₁ Honest₁))
                 (BitML.Contracts.Helpers.nub-participants Participant₁ Honest₁
                  (BitML.Contracts.Types.Advertisement.G ad))}
              {p₃
               : Prelude.Decidable.Core.auto∶
                 (BitML.Contracts.Helpers.deposits Participant₁ Honest₁ ad ⊆
                  BitML.Contracts.Helpers.deposits Participant₁ Honest₁ Γ)} →
              Prelude.InferenceRules.────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Semantics.DecidableInference._.advertise⦅ ad ⦆
              ((BitML.Semantics.DecidableInference._.` ad)
               BitML.Semantics.DecidableInference._.∣ Γ)
  C-AuthCommit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {secrets = secrets₁ : List (Secret × Maybe ℕ)}
              {p₁
               : Prelude.Decidable.Core.auto∶
                 (proj₁ (unzip secrets₁) ≡
                  BitML.Contracts.Helpers.secretsOfᵖ Participant₁ Honest₁ A
                  (ad .BitML.Contracts.Types.Advertisement.G))}
              {p₂
               : Prelude.Decidable.Core.auto∶
                 All
                 (λ section →
                    (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                     section)
                    (BitML.Semantics.Configurations.Helpers.secretsOfᶜᶠ Participant₁
                     Honest₁ A Γ))
                 (proj₁ (unzip secrets₁))}
              {p₃
               : Prelude.Decidable.Core.auto∶
                 ((setoid Participant₁ Data.List.Membership.Setoid.∈ A)
                  (BitML.Contracts.Types.Hon Participant₁ Honest₁) →
                  All Is-just (proj₂ (unzip secrets₁)))} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.` ad)
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.auth-commit⦅ A , ad , secrets₁
              ⦆
              ((((BitML.Semantics.DecidableInference._.` ad)
                 BitML.Semantics.DecidableInference._.∣ Γ)
                BitML.Semantics.DecidableInference._.∣
                (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (λ { (ai , Ni)
                        → BitML.Semantics.DecidableInference._.⟨ A ∶ ai ♯ Ni ⟩
                    })
                 secrets₁))
               BitML.Semantics.DecidableInference._.∣
               (A BitML.Semantics.DecidableInference._.auth[
                BitML.Semantics.DecidableInference._.♯▷ ad ]))
  C-AuthControl
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {A : Participant₁} {v : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {i : Prelude.Lists.Indexed.Index c}
              {p₁
               : Prelude.Decidable.Core.auto∶
                 (A L.Mem.∈
                  BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁
                  (c Prelude.Lists.Indexed.‼ i))} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.⟨ c , v ⟩at x)
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.auth-control⦅ A , x ▷
              c Prelude.Lists.Indexed.‼ i ⦆
              (((BitML.Semantics.DecidableInference._.⟨ c , v ⟩at x)
                BitML.Semantics.DecidableInference._.∣
                (A BitML.Semantics.DecidableInference._.auth[
                 x BitML.Semantics.DecidableInference._.▷
                 (c Prelude.Lists.Indexed.‼ i)
                 ]))
               BitML.Semantics.DecidableInference._.∣ Γ)
  C-AuthInit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v : Value} {x : Id}
              {p₁
               : Prelude.Decidable.Core.auto∶
                 (BitML.Contracts.Helpers.nub-participants Participant₁ Honest₁
                  (ad .BitML.Contracts.Types.Advertisement.G)
                  ⊆
                  BitML.Semantics.Configurations.Helpers.committedParticipants
                  Participant₁ Honest₁ ad Γ)}
              {p₂
               : Prelude.Decidable.Core.auto∶
                 (setoid (Σ Participant₁ (λ v₁ → Σ ℕ (λ v₂ → String)))
                  Data.List.Membership.Setoid.∈ (A , v , x))
                 (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                  (ad .BitML.Contracts.Types.Advertisement.G))} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.` ad)
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.auth-init⦅ A , ad , x ⦆
              (((BitML.Semantics.DecidableInference._.` ad)
                BitML.Semantics.DecidableInference._.∣ Γ)
               BitML.Semantics.DecidableInference._.∣
               (A BitML.Semantics.DecidableInference._.auth[
                x BitML.Semantics.DecidableInference._.▷ˢ ad ]))
  C-Control : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {Γ L
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {v : Value} {x : Id}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {i : Prelude.Lists.Indexed.Index c}
              {p₀
               : Prelude.Decidable.Core.auto∶
                 (Prelude.Null.Nullable.¬Null Prelude.Null.Monoid⇒Nullable
                  (BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁
                   (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i))
                  ⊎ (Prelude.Ord.Instances.Ord-ℕ Prelude.Ord.Core.Ord.> length c) 1)}
              {p₁
               : Prelude.Decidable.Core.auto∶
                 (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ L} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.⟨
                 [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c i ] , v
                 ⟩at x)
                BitML.Semantics.DecidableInference._.∣ L))
              α Γ′ →
              {p₂
               : Prelude.Decidable.Core.auto∶
                 (BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ just x)} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               (((BitML.Semantics.DecidableInference._.⟨ c , v ⟩at x)
                 BitML.Semantics.DecidableInference._.∣
                 (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                 (map
                  (BitML.Semantics.DecidableInference._._auth[
                   x BitML.Semantics.DecidableInference._.▷
                   BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i
                   ])
                  (Prelude.Lists.Dec.nub
                   (BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁
                    (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i)))))
                BitML.Semantics.DecidableInference._.∣ Γ))
              α Γ′
  C-Init    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {p
               : Prelude.Decidable.Core.auto∶
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
                 (map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3)
                  (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                   (BitML.Contracts.Types.Advertisement.G ad))
                  ++ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((((BitML.Semantics.DecidableInference._.` ad)
                  BitML.Semantics.DecidableInference._.∣ Γ)
                 BitML.Semantics.DecidableInference._.∣
                 (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                 (map
                  (λ { (Aᵢ , vᵢ , xᵢ)
                         → (BitML.Semantics.DecidableInference._.⟨ Aᵢ has vᵢ ⟩at xᵢ)
                           BitML.Semantics.DecidableInference._.∣
                           (Aᵢ BitML.Semantics.DecidableInference._.auth[
                            xᵢ BitML.Semantics.DecidableInference._.▷ˢ ad ])
                     })
                  (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                   (BitML.Contracts.Types.Advertisement.G ad))))
                BitML.Semantics.DecidableInference._.∣
                (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (BitML.Semantics.DecidableInference._._auth[
                  BitML.Semantics.DecidableInference._.♯▷ ad ])
                 (BitML.Contracts.Helpers.nub-participants Participant₁ Honest₁
                  (BitML.Contracts.Types.Advertisement.G ad)))))
              BitML.Semantics.DecidableInference._.init⦅
              BitML.Contracts.Types.Advertisement.G ad ,
              BitML.Contracts.Types.Advertisement.C ad ⦆
              ((BitML.Semantics.DecidableInference._.⟨
                BitML.Contracts.Types.Advertisement.C ad ,
                sum
                (map (Prelude.Nary.Focus₂_⟪_⟫_.select₂ Prelude.Nary.N2⁺)
                 (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                  (BitML.Contracts.Types.Advertisement.G ad)))
                ⟩at x)
               BitML.Semantics.DecidableInference._.∣ Γ)
  C-PutRev  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {z = z₁ : Id} {y : Id} {p : Predicate}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {ds : List (Participant₁ × Value × Id)}
              {ss : List (Participant₁ × Secret × ℕ)}
              {p₀
               : Prelude.Decidable.Core.auto∶
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ z₁)
                 (y ∷
                  BitML.Contracts.Helpers.ids Participant₁ Honest₁
                  ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                   (map
                    (λ { (Ai , vi , xi)
                           → BitML.Semantics.DecidableInference._.⟨ Ai has vi ⟩at xi
                       })
                    ds)
                   BitML.Semantics.DecidableInference._.∣
                   ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                    (map
                     (λ { (Bi , ai , Ni)
                            → Bi BitML.Semantics.DecidableInference._.∶ ai ♯ Ni
                        })
                     ss)
                    BitML.Semantics.DecidableInference._.∣ Γ′)))}
              {p₁
               : Prelude.Decidable.Core.auto∶
                 ((BitML.Semantics.Predicate.⟦ Participant₁ ⟧ Honest₁) p
                  ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                   (map
                    (λ { (Bi , ai , Ni)
                           → Bi BitML.Semantics.DecidableInference._.∶ ai ♯ Ni
                       })
                    ss))
                  ≡ just true)} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.⟨
                 [
                 BitML.Semantics.DecidableInference._.put
                 proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ ds)) &reveal
                 proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ss)) if p ⇒ c
                 ]
                 , v ⟩at y)
                BitML.Semantics.DecidableInference._.∣
                ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                 (map
                  (λ { (Ai , vi , xi)
                         → BitML.Semantics.DecidableInference._.⟨ Ai has vi ⟩at xi
                     })
                  ds)
                 BitML.Semantics.DecidableInference._.∣
                 ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                  (map
                   (λ { (Bi , ai , Ni)
                          → Bi BitML.Semantics.DecidableInference._.∶ ai ♯ Ni
                      })
                   ss)
                  BitML.Semantics.DecidableInference._.∣ Γ′))))
              BitML.Semantics.DecidableInference._.put⦅
              proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ ds)) ,
              proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ss)) , y ⦆
              ((BitML.Semantics.DecidableInference._.⟨ c ,
                v + sum (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ds))) ⟩at z₁)
               BitML.Semantics.DecidableInference._.∣
               ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (λ { (Bi , ai , Ni)
                        → Bi BitML.Semantics.DecidableInference._.∶ ai ♯ Ni
                    })
                 ss)
                BitML.Semantics.DecidableInference._.∣ Γ′))
  C-Split   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {vcis
               : List
                 (Value ×
                  BitML.Contracts.Types.Contracts Participant₁ Honest₁ × Id)}
              {p
               : Prelude.Decidable.Core.auto∶
                 All
                 (λ section →
                    (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                     section)
                    (y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ))
                 (proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ vcis)))} →
              Prelude.InferenceRules.──────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.⟨
                 [
                 BitML.Semantics.DecidableInference.split
                 (zip (proj₁ (Prelude.Lists.Core.unzip₃ vcis))
                  (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ vcis))))
                 ]
                 , sum (proj₁ (Prelude.Lists.Core.unzip₃ vcis)) ⟩at y)
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.split⦅ y ⦆
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (Prelude.Nary.uncurry₃ $
                 flip BitML.Semantics.DecidableInference.⟨_,_⟩at_)
                vcis)
               BitML.Semantics.DecidableInference._.∣ Γ)
  C-Withdraw
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {x y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v : Value}
              {p
               : Prelude.Decidable.Core.auto∶
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
                 (y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.⟨
                 [ BitML.Semantics.DecidableInference.withdraw A ] , v ⟩at y)
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.withdraw⦅ A , v , y ⦆
              ((BitML.Semantics.DecidableInference._.⟨ A has v ⟩at x)
               BitML.Semantics.DecidableInference._.∣ Γ)
  Cfg       : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Cfgᵗ      : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Cfg′      : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Cfg′↝Cfg  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg′ Participant₁ Honest₁
              Prelude.Coercions.↝
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
  Cfg↝BaseCfg
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
              Prelude.Coercions.⁇
              BitML.Semantics.Configurations.Helpers.IsBase Participant₁ Honest₁
              ↝ BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  Cfg↝Cfg′  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
              Prelude.Coercions.↝
              BitML.Semantics.Configurations.Types.Cfg′ Participant₁ Honest₁
  Configuration
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Contract  : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Contracts : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  DEP-AuthDestroy
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {ds : List (Participant₁ × Value × Id)}
              {j : Prelude.Lists.Indexed.Index ds}
              {p
               : Prelude.Decidable.Core.auto∶
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ y)
                 (BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)} →
              Prelude.InferenceRules.──────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (Prelude.Nary.uncurry₃
                  BitML.Semantics.DecidableInference.⟨_has_⟩at_)
                 ds)
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.auth-destroy⦅
              (ds Prelude.Lists.Indexed.‼ j) .proj₁ ,
              map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3) ds ,
              Prelude.Lists.Indexed.‼-map j ⦆
              (((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (Prelude.Nary.uncurry₃
                  BitML.Semantics.DecidableInference.⟨_has_⟩at_)
                 ds)
                BitML.Semantics.DecidableInference._.∣
                ((ds Prelude.Lists.Indexed.‼ j) .proj₁
                 BitML.Semantics.DecidableInference._.auth[
                 map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3) ds
                 BitML.Semantics.DecidableInference._.,
                 Prelude.Lists.Indexed.‼-map j ▷ᵈˢ y
                 ]))
               BitML.Semantics.DecidableInference._.∣ Γ)
  DEP-Divide
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {y y′ : Id} {A : Participant₁} {v v′ : Value}
              {p
               : Prelude.Decidable.Core.auto∶
                 All
                 (λ section →
                    (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                     section)
                    (x ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ))
                 (y ∷ y′ ∷ `∅ᶜ)} →
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               (((BitML.Semantics.DecidableInference._.⟨ A has v + v′ ⟩at x)
                 BitML.Semantics.DecidableInference._.∣
                 (A BitML.Semantics.DecidableInference._.auth[
                  x BitML.Semantics.DecidableInference._.▷⟨ A , v , v′ ⟩ ]))
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.divide⦅ x ▷ v , v′ ⦆
              (((BitML.Semantics.DecidableInference._.⟨ A has v ⟩at y)
                BitML.Semantics.DecidableInference._.∣
                (BitML.Semantics.DecidableInference._.⟨ A has v′ ⟩at y′))
               BitML.Semantics.DecidableInference._.∣ Γ)
  DEP-Donate
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {y x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v : Value} {B : Participant₁}
              {p
               : Prelude.Decidable.Core.auto∶
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ y)
                 (x ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)} →
              Prelude.InferenceRules.──────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               (((BitML.Semantics.DecidableInference._.⟨ A has v ⟩at x)
                 BitML.Semantics.DecidableInference._.∣
                 (A BitML.Semantics.DecidableInference._.auth[
                  x BitML.Semantics.DecidableInference._.▷ᵈ B ]))
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.donate⦅ x ▷ᵈ B ⦆
              ((BitML.Semantics.DecidableInference._.⟨ B has v ⟩at y)
               BitML.Semantics.DecidableInference._.∣ Γ)
  DEP-Join  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {z = z₁ : Id} {x y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v v′ : Value}
              {p
               : Prelude.Decidable.Core.auto∶
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ z₁)
                 (x ∷ y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)} →
              Prelude.InferenceRules.────────────────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((((BitML.Semantics.DecidableInference._.⟨ A has v ⟩at x)
                  BitML.Semantics.DecidableInference._.∣
                  (BitML.Semantics.DecidableInference._.⟨ A has v′ ⟩at y))
                 BitML.Semantics.DecidableInference._.∣
                 (A BitML.Semantics.DecidableInference._.auth[
                  x BitML.Semantics.DecidableInference._.↔ y ▷⟨ A , v + v′ ⟩ ]))
                BitML.Semantics.DecidableInference._.∣ Γ))
              BitML.Semantics.DecidableInference._.join⦅ x ↔ y ⦆
              ((BitML.Semantics.DecidableInference._.⟨ A has v + v′ ⟩at z₁)
               BitML.Semantics.DecidableInference._.∣ Γ)
  Dec-𝕍Ad   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
              Prelude.Decidable.Core.⁇¹
  DecEq-Action
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq (BitML.Semantics.Action.Action Participant₁ Honest₁)
  DecEq-Advertisement
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)
  DecEq-Contract
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  DecEq-Label
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq (BitML.Semantics.Label.Label Participant₁ Honest₁)
  DecEq-Precondition
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq (BitML.Contracts.Types.Precondition Participant₁ Honest₁)
  DecEqᵃʳ   : DecEq Arith
  DecEqᵇᶜᶠ  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq
              (BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁)
  DecEqᵖʳ   : DecEq Predicate
  DecEqᵗᶜᶠ  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq
              (BitML.Semantics.Configurations.Types.TimedConfiguration
               Participant₁ Honest₁)
  DecEqᶜᶠ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              DecEq
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁)
  Delay     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {δ : Time}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time}
              {p
               : True $
                 (Prelude.Ord.Instances.DecOrd-ℕ Prelude.Ord.Dec.DecOrd.>? δ) 0} →
              Prelude.InferenceRules.─────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
               (Γ BitML.Semantics.DecidableInference._.at t))
              BitML.Semantics.DecidableInference._.delay⦅ δ ⦆
              (Γ BitML.Semantics.DecidableInference._.at (t + δ))
  DepositRef
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  DepositType
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  G         : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
  HAᵇᶜᶠ     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
  HAᶜᶠ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Semantics.Action.Action Participant₁ Honest₁
  HA↠ₜ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′
              Prelude.Lists.Collections.has
              BitML.Contracts.Types.Ad Participant₁ Honest₁
  HBC⇒HC′   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄ →
              BitML.Semantics.Configurations.Types.Cfg′ Participant₁ Honest₁
              Prelude.Lists.Collections.has X
  HC′⇒HC    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : BitML.Semantics.Configurations.Types.Cfg′ Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
              Prelude.Lists.Collections.has X
  HDᵃ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Types.DepositRef Participant₁ Honest₁
  HDᵖ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Types.DepositRef Participant₁ Honest₁
  HDᶜᶠ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Types.DepositRef Participant₁ Honest₁
  HL↠ₜ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′
              Prelude.Lists.Collections.has
              BitML.Semantics.Label.Label Participant₁ Honest₁
  HNᵃ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
              Prelude.Lists.Collections.has Name
  HNᵃᶜ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Action.Action Participant₁ Honest₁
              Prelude.Lists.Collections.has Name
  HNᵖ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
              Prelude.Lists.Collections.has Name
  HNᵛᶜˢ     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁
              Prelude.Lists.Collections.has Name
  HNᶜ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
              Prelude.Lists.Collections.has Name
  HNᶜˢ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
              Prelude.Lists.Collections.has Name
  HNᶜᶠ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
              Prelude.Lists.Collections.has Name
  HN↠ₜ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′
              Prelude.Lists.Collections.has Name
  HPCᵛᶜˢ    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Helpers.PutComponent Participant₁ Honest₁
  HPCᶜ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Helpers.PutComponent Participant₁ Honest₁
  HPCᶜˢ     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Helpers.PutComponent Participant₁ Honest₁
  HPᵃ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
              Prelude.Lists.Collections.has Participant₁
  HPᵖ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
              Prelude.Lists.Collections.has Participant₁
  HPᵛᶜˢ     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁
              Prelude.Lists.Collections.has Participant₁
  HPᶜ       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
              Prelude.Lists.Collections.has Participant₁
  HPᶜˢ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
              Prelude.Lists.Collections.has Participant₁
  HSᵃʳ      : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Arith Prelude.Lists.Collections.has Name
  HTDᵃ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Types.TDepositRef Participant₁ Honest₁
  HTDᵖ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
              Prelude.Lists.Collections.has
              BitML.Contracts.Types.TDepositRef Participant₁ Honest₁
  HX↠ₜ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {X : Set}
              ⦃ _
                : {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)} →
                  (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                   Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                   αs)
                  Γₜ′
                  Prelude.Lists.Collections.has X ⦄ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—↠ Γₜ)
              Γₜ′
              Prelude.Lists.Collections.has X
  Hon       : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              List Participant₁
  Hᵖʳ       : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : Arith Prelude.Lists.Collections.has X ⦄ →
              Predicate Prelude.Lists.Collections.has X
  Hᶜᶠ⇒Hᵗᶜᶠ  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄ →
              BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁
              Prelude.Lists.Collections.has X
  Hℂ        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : BitML.Contracts.Types.Contract Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄
              ⦃ _
                : BitML.Contracts.Types.Contracts Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄
              ⦃ _
                : BitML.Contracts.Types.VContracts Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄ →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁
              Prelude.Lists.Collections.has X
  Id        : Set
  Ids       : Set
  Initial-Cfg
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Traces.HasInitial
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  Initial-Cfgᵗ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Traces.HasInitial
              (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁)
  Initial⇒∉ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              ⦃ _
                : (Participant₁ BitML.Semantics.Configurations.Helpers.≢deposit)
                  Honest₁ Γ₀ ⦄ →
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → ⊤
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ _ has _ ⟩at
                    _)
                     → ⊤
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       l
                       ×
                       Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       r
                 ; _ → ⊥
                 })
              Γ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁) Γ₀
              Γ
  IsBase    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Pred₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  IsBase-BaseCfg
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (`γ
               : BitML.Semantics.Configurations.Types.BaseCfg Participant₁
                 Honest₁) →
              BitML.Semantics.Configurations.Helpers.IsBase Participant₁ Honest₁
              ((λ { (BitML.Semantics.Configurations.Types.BaseCfg.`` ad)
                      → BitML.Semantics.Configurations.Types.Configuration.` ad
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at x
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ])
                      → A BitML.Semantics.Configurations.Types.Configuration.auth[ a ]
                  ; BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n)
                      → A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n
                  })
               `γ)
  IsBase-to[Cfg]
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (β
               : BitML.Semantics.Configurations.Types.BaseCfg Participant₁
                 Honest₁) →
              BitML.Semantics.Configurations.Helpers.IsBase Participant₁ Honest₁
              ((λ { (BitML.Semantics.Configurations.Types.BaseCfg.`` ad)
                      → BitML.Semantics.Configurations.Types.Configuration.` ad
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at x
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ])
                      → A BitML.Semantics.Configurations.Types.Configuration.auth[ a ]
                  ; BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n)
                      → A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n
                  })
               β)
  IsComposite
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Pred₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  L         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Label     : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Labels    : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  L′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  L″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  M         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  MT        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              Prelude.Measurable.Measurable
              ((BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                αs)
               Γₜ″)
  M′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  M″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Name      : Set
  Names     : Set
  Precondition
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Predicate : Set
  PutComponent
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Secret    : Set
  Secrets   : Set
  Setoid-Cfg
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Setoid.Core.ISetoid
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  Setoid-Cfgᵗ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Setoid.Core.ISetoid
              (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁)
  Setoid-Cfg′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Setoid.Core.ISetoid
              (BitML.Semantics.Configurations.Types.Cfg′ Participant₁ Honest₁)
  SetoidLaws-Cfg
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Setoid.Core.SetoidLaws
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  SetoidLaws-Cfgᵗ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Setoid.Core.SetoidLaws
              (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁)
  SetoidLaws-Cfg′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Setoid.Core.SetoidLaws
              (BitML.Semantics.Configurations.Types.Cfg′ Participant₁ Honest₁)
  Split-step
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α Γ′
              Prelude.Split.-splitsInto-
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
  Split-stepₜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
              Γₜ′
              Prelude.Split.-splitsInto-
              BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁
  Split-∣   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              ∃
              (BitML.Semantics.Configurations.Helpers.IsComposite Participant₁
               Honest₁)
              Prelude.Split.-splitsInto-
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
  Squashed-IsBase
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁} →
              Prelude.Irrelevance.Core.·
              BitML.Semantics.Configurations.Helpers.IsBase Participant₁ Honest₁
              Γ
  TDepositRef
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Time      : Set
  TimedConfiguration
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  Timeout   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {t : Time} {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {x : Id} {v : Value}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {i : Prelude.Lists.Indexed.Index c}
              {p₁
               : True $
                 Prelude.Null.Nullable.Null? Prelude.Null.Monoid⇒Nullable
                 (proj₁
                  (BitML.Contracts.Helpers.decorations Participant₁ Honest₁
                   (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i)))}
              {p₂
               : Prelude.Decidable.Core.auto∶
                 All (Nat._≤ t)
                 (proj₂
                  (BitML.Contracts.Helpers.decorations Participant₁ Honest₁
                   (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i)))}
              {p₃
               : Prelude.Decidable.Core.auto∶
                 (BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ just x)} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.DecidableInference._.⟨
                 [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c i ] , v
                 ⟩at x)
                BitML.Semantics.DecidableInference._.∣ Γ))
              α Γ′
              Prelude.InferenceRules.──────────────────────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
               (((BitML.Semantics.DecidableInference._.⟨ c , v ⟩at x)
                 BitML.Semantics.DecidableInference._.∣ Γ)
                BitML.Semantics.DecidableInference._.at t))
              α (Γ′ BitML.Semantics.DecidableInference._.at t)
  VContracts
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Set
  ValidAdvertisement
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁) →
              Set
  Valid⇒part⊆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁} →
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
              ad →
              BitML.Contracts.Helpers.participants Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.C ad)
              ⊆
              BitML.Contracts.Helpers.participants Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.G ad)
  Value     : Set
  Values    : Set
  [Action]  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} →
              Prelude.InferenceRules.∙
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α Γ′
               Prelude.InferenceRules.∙
               ((BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ nothing)
                Prelude.InferenceRules.───────────────────────
                (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
                 (Γ BitML.Semantics.InferenceRules._.at t))
                α (Γ′ BitML.Semantics.InferenceRules._.at t)))
  [C-Advertise]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Prelude.InferenceRules.∙
              (BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
               ad
               Prelude.InferenceRules.∙
               (Any
                (λ section →
                   (setoid Participant₁ Data.List.Membership.Setoid.∈ section)
                   (BitML.Contracts.Types.Hon Participant₁ Honest₁))
                (BitML.Contracts.Helpers.nub-participants Participant₁ Honest₁
                 (BitML.Contracts.Types.Advertisement.G ad))
                Prelude.InferenceRules.∙
                ((BitML.Contracts.Helpers.deposits Participant₁ Honest₁ ad ⊆
                  BitML.Contracts.Helpers.deposits Participant₁ Honest₁ Γ)
                 Prelude.InferenceRules.────────────────────────────────────────────────────────────
                 (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
                 BitML.Semantics.InferenceRules._.advertise⦅ ad ⦆
                 ((BitML.Semantics.InferenceRules._.` ad)
                  BitML.Semantics.InferenceRules._.∣ Γ))))
  [C-AuthCommit]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {A : Participant₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {secrets = secrets₁ : List (Secret × Maybe ℕ)} →
              Prelude.InferenceRules.∙
              ((proj₁ (unzip secrets₁) ≡
                BitML.Contracts.Helpers.secretsOfᵖ Participant₁ Honest₁ A
                (BitML.Contracts.Types.Advertisement.G ad))
               Prelude.InferenceRules.∙
               (All
                (λ section →
                   (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                    section)
                   (BitML.Semantics.Configurations.Helpers.secretsOfᶜᶠ Participant₁
                    Honest₁ A Γ))
                (proj₁ (unzip secrets₁))
                Prelude.InferenceRules.∙
                (((setoid Participant₁ Data.List.Membership.Setoid.∈ A)
                  (BitML.Contracts.Types.Hon Participant₁ Honest₁) →
                  All Is-just (proj₂ (unzip secrets₁)))
                 Prelude.InferenceRules.──────────────────────────────────────────────────────────────────────────
                 (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
                  ((BitML.Semantics.InferenceRules._.` ad)
                   BitML.Semantics.InferenceRules._.∣ Γ))
                 BitML.Semantics.InferenceRules._.auth-commit⦅ A , ad , secrets₁ ⦆
                 ((((BitML.Semantics.InferenceRules._.` ad)
                    BitML.Semantics.InferenceRules._.∣ Γ)
                   BitML.Semantics.InferenceRules._.∣
                   (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                   (map (uncurry (BitML.Semantics.InferenceRules.⟨_∶_♯_⟩ A))
                    secrets₁))
                  BitML.Semantics.InferenceRules._.∣
                  (A BitML.Semantics.InferenceRules._.auth[
                   BitML.Semantics.InferenceRules._.♯▷ ad ])))))
  [C-AuthControl]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {A : Participant₁} {v : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {i : Prelude.Lists.Indexed.Index c} →
              (setoid Participant₁ Data.List.Membership.Setoid.∈ A)
              (BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁
               (c Prelude.Lists.Indexed.‼ i))
              Prelude.InferenceRules.───────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.InferenceRules._.⟨ c , v ⟩at x)
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.auth-control⦅ A , x ▷
              c Prelude.Lists.Indexed.‼ i ⦆
              (((BitML.Semantics.InferenceRules._.⟨ c , v ⟩at x)
                BitML.Semantics.InferenceRules._.∣
                (A BitML.Semantics.InferenceRules._.auth[
                 x BitML.Semantics.InferenceRules._.▷ (c Prelude.Lists.Indexed.‼ i)
                 ]))
               BitML.Semantics.InferenceRules._.∣ Γ)
  [C-AuthInit]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v : Value} {x : Id} →
              Prelude.InferenceRules.∙
              ((BitML.Contracts.Helpers.nub-participants Participant₁ Honest₁
                (BitML.Contracts.Types.Advertisement.G ad)
                ⊆
                BitML.Semantics.Configurations.Helpers.committedParticipants
                Participant₁ Honest₁ ad Γ)
               Prelude.InferenceRules.∙
               ((setoid (Σ Participant₁ (λ v₁ → Σ ℕ (λ v₂ → String)))
                 Data.List.Membership.Setoid.∈ (A , v , x))
                (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                 (BitML.Contracts.Types.Advertisement.G ad))
                Prelude.InferenceRules.───────────────────────────────────────────────────────────────────────────────────
                (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
                 ((BitML.Semantics.InferenceRules._.` ad)
                  BitML.Semantics.InferenceRules._.∣ Γ))
                BitML.Semantics.InferenceRules._.auth-init⦅ A , ad , x ⦆
                (((BitML.Semantics.InferenceRules._.` ad)
                  BitML.Semantics.InferenceRules._.∣ Γ)
                 BitML.Semantics.InferenceRules._.∣
                 (A BitML.Semantics.InferenceRules._.auth[
                  x BitML.Semantics.InferenceRules._.▷ˢ ad ]))))
  [C-AuthRev]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {A : Participant₁}
              {a : Secret} {n : ℕ}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Prelude.InferenceRules.─────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               (BitML.Semantics.InferenceRules._.⟨ A ∶ a ♯ just n ⟩
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.auth-rev⦅ A , a ⦆
              ((A BitML.Semantics.InferenceRules._.∶ a ♯ n)
               BitML.Semantics.InferenceRules._.∣ Γ)
  [C-Control]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {Γ L
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {v : Value} {x : Id}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {i : Prelude.Lists.Indexed.Index c} →
              Prelude.InferenceRules.∙
              ((Prelude.Null.Nullable.¬Null Prelude.Null.Monoid⇒Nullable
                (BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁
                 (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i))
                ⊎ (Prelude.Ord.Instances.Ord-ℕ Prelude.Ord.Core.Ord.> length c) 1)
               Prelude.InferenceRules.∙
               ((_↭_ on
                 (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                    ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                        → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                    ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                       x)
                        → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                    ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                       x)
                        → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                    ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                        → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                    ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                        → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                    ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                        → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                    ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                        → Prelude.Coercions._↝_.to
                          (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                           Honest₁)
                          l
                          ++
                          Prelude.Coercions._↝_.to
                          (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                           Honest₁)
                          r
                    }))
                Γ L
                Prelude.InferenceRules.∙
                ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
                  ((BitML.Semantics.InferenceRules._.⟨
                    [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c i ] , v
                    ⟩at x)
                   BitML.Semantics.InferenceRules._.∣ L))
                 α Γ′
                 Prelude.InferenceRules.∙
                 ((BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ just x)
                  Prelude.InferenceRules.───────────────────────────────────────────────────────────────────
                  (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
                   (((BitML.Semantics.InferenceRules._.⟨ c , v ⟩at x)
                     BitML.Semantics.InferenceRules._.∣
                     (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                     (map
                      (BitML.Semantics.InferenceRules._._auth[
                       x BitML.Semantics.InferenceRules._.▷
                       BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i
                       ])
                      (Prelude.Lists.Dec.nub $
                       BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁
                       (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i))))
                    BitML.Semantics.InferenceRules._.∣ Γ))
                  α Γ′))))
  [C-Init]  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
              (map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3)
               (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                (BitML.Contracts.Types.Advertisement.G ad))
               ++ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)
              Prelude.InferenceRules.──────────────────────────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((((BitML.Semantics.InferenceRules._.` ad)
                  BitML.Semantics.InferenceRules._.∣ Γ)
                 BitML.Semantics.InferenceRules._.∣
                 (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                 (map
                  (λ { (Aᵢ , vᵢ , xᵢ)
                         → (BitML.Semantics.InferenceRules._.⟨ Aᵢ has vᵢ ⟩at xᵢ)
                           BitML.Semantics.InferenceRules._.∣
                           (Aᵢ BitML.Semantics.InferenceRules._.auth[
                            xᵢ BitML.Semantics.InferenceRules._.▷ˢ ad ])
                     })
                  (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                   (BitML.Contracts.Types.Advertisement.G ad))))
                BitML.Semantics.InferenceRules._.∣
                (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (BitML.Semantics.InferenceRules._._auth[
                  BitML.Semantics.InferenceRules._.♯▷ ad ])
                 (BitML.Contracts.Helpers.nub-participants Participant₁ Honest₁
                  (BitML.Contracts.Types.Advertisement.G ad)))))
              BitML.Semantics.InferenceRules._.init⦅
              BitML.Contracts.Types.Advertisement.G ad ,
              BitML.Contracts.Types.Advertisement.C ad ⦆
              ((BitML.Semantics.InferenceRules._.⟨
                BitML.Contracts.Types.Advertisement.C ad ,
                sum
                (map (Prelude.Nary.Focus₂_⟪_⟫_.select₂ Prelude.Nary.N2⁺)
                 (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
                  (BitML.Contracts.Types.Advertisement.G ad)))
                ⟩at x)
               BitML.Semantics.InferenceRules._.∣ Γ)
  [C-PutRev]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {z = z₁ : Id} {y : Id} {p : Predicate}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {ds : List (Participant₁ × Value × Id)}
              {ss : List (Participant₁ × Secret × ℕ)} →
              Prelude.InferenceRules.∙
              ((Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ z₁)
               (y ∷
                BitML.Contracts.Helpers.ids Participant₁ Honest₁
                ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                 (map
                  (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules.⟨_has_⟩at_)
                  ds)
                 BitML.Semantics.InferenceRules._.∣
                 ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                  (map (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules._∶_♯_)
                   ss)
                  BitML.Semantics.InferenceRules._.∣ Γ′)))
               Prelude.InferenceRules.∙
               (((BitML.Semantics.Predicate.⟦ Participant₁ ⟧ Honest₁) p
                 ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                  (map (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules._∶_♯_)
                   ss))
                 ≡ just true)
                Prelude.InferenceRules.──────────────────────────────────────────────────────
                (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
                 ((BitML.Semantics.InferenceRules._.⟨
                   [
                   BitML.Semantics.InferenceRules._.put
                   proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ ds)) &reveal
                   proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ss)) if p ⇒ c
                   ]
                   , v ⟩at y)
                  BitML.Semantics.InferenceRules._.∣
                  ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                   (map
                    (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules.⟨_has_⟩at_)
                    ds)
                   BitML.Semantics.InferenceRules._.∣
                   ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                    (map (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules._∶_♯_)
                     ss)
                    BitML.Semantics.InferenceRules._.∣ Γ′))))
                BitML.Semantics.InferenceRules._.put⦅
                proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ ds)) ,
                proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ss)) , y ⦆
                ((BitML.Semantics.InferenceRules._.⟨ c ,
                  v + sum (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ds))) ⟩at z₁)
                 BitML.Semantics.InferenceRules._.∣
                 ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                  (map (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules._∶_♯_)
                   ss)
                  BitML.Semantics.InferenceRules._.∣ Γ′))))
  [C-Split] : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {vcis
               : List
                 (Value ×
                  BitML.Contracts.Types.Contracts Participant₁ Honest₁ × Id)} →
              All
              (λ section →
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                  section)
                 (y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ))
              (proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ vcis)))
              Prelude.InferenceRules.──────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.InferenceRules._.⟨
                 [
                 BitML.Semantics.InferenceRules.split
                 (zip (proj₁ (Prelude.Lists.Core.unzip₃ vcis))
                  (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ vcis))))
                 ]
                 , sum (proj₁ (Prelude.Lists.Core.unzip₃ vcis)) ⟩at y)
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.split⦅ y ⦆
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (Prelude.Nary.uncurry₃ $
                 flip BitML.Semantics.InferenceRules.⟨_,_⟩at_)
                vcis)
               BitML.Semantics.InferenceRules._.∣ Γ)
  [C-Withdraw]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {x y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v : Value} →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
              (y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)
              Prelude.InferenceRules.──────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.InferenceRules._.⟨
                 [ BitML.Semantics.InferenceRules.withdraw A ] , v ⟩at y)
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.withdraw⦅ A , v , y ⦆
              ((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at x)
               BitML.Semantics.InferenceRules._.∣ Γ)
  [DEP-AuthDestroy]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {ds : List (Participant₁ × Value × Id)}
              {j : Prelude.Lists.Indexed.Index ds} →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ y)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)
              Prelude.InferenceRules.──────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules.⟨_has_⟩at_)
                 ds)
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.auth-destroy⦅
              (ds Prelude.Lists.Indexed.‼ j) .proj₁ ,
              map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3) ds ,
              Prelude.Lists.Indexed.‼-map j ⦆
              (((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (Prelude.Nary.uncurry₃ BitML.Semantics.InferenceRules.⟨_has_⟩at_)
                 ds)
                BitML.Semantics.InferenceRules._.∣
                ((ds Prelude.Lists.Indexed.‼ j) .proj₁
                 BitML.Semantics.InferenceRules._.auth[
                 map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3) ds
                 BitML.Semantics.InferenceRules._., Prelude.Lists.Indexed.‼-map j
                 ▷ᵈˢ y
                 ]))
               BitML.Semantics.InferenceRules._.∣ Γ)
  [DEP-AuthDivide]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {A : Participant₁}
              {v v′ : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.InferenceRules._.⟨ A has v + v′ ⟩at x)
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.auth-divide⦅ A , x ▷ v , v′ ⦆
              (((BitML.Semantics.InferenceRules._.⟨ A has v + v′ ⟩at x)
                BitML.Semantics.InferenceRules._.∣
                (A BitML.Semantics.InferenceRules._.auth[
                 x BitML.Semantics.InferenceRules._.▷⟨ A , v , v′ ⟩ ]))
               BitML.Semantics.InferenceRules._.∣ Γ)
  [DEP-AuthDonate]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {A : Participant₁}
              {v : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {B : Participant₁} →
              Prelude.InferenceRules.──────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at x)
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.auth-donate⦅ A , x ▷ᵈ B ⦆
              (((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at x)
                BitML.Semantics.InferenceRules._.∣
                (A BitML.Semantics.InferenceRules._.auth[
                 x BitML.Semantics.InferenceRules._.▷ᵈ B ]))
               BitML.Semantics.InferenceRules._.∣ Γ)
  [DEP-AuthJoin]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {A : Participant₁}
              {v : Value} {x : Id} {v′ : Value} {y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Prelude.InferenceRules.────────────────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               (((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at x)
                 BitML.Semantics.InferenceRules._.∣
                 (BitML.Semantics.InferenceRules._.⟨ A has v′ ⟩at y))
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.auth-join⦅ A , x ↔ y ⦆
              ((((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at x)
                 BitML.Semantics.InferenceRules._.∣
                 (BitML.Semantics.InferenceRules._.⟨ A has v′ ⟩at y))
                BitML.Semantics.InferenceRules._.∣
                (A BitML.Semantics.InferenceRules._.auth[
                 x BitML.Semantics.InferenceRules._.↔ y ▷⟨ A , v + v′ ⟩ ]))
               BitML.Semantics.InferenceRules._.∣ Γ)
  [DEP-Destroy]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {ds : List (Participant₁ × Value × Id)} →
              Prelude.InferenceRules.────────────────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (λ { (i , Aᵢ , vᵢ , xᵢ)
                        → (BitML.Semantics.InferenceRules._.⟨ Aᵢ has vᵢ ⟩at xᵢ)
                          BitML.Semantics.InferenceRules._.∣
                          (Aᵢ BitML.Semantics.InferenceRules._.auth[
                           map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3) ds
                           BitML.Semantics.InferenceRules._., Prelude.Lists.Indexed.‼-map i
                           ▷ᵈˢ y
                           ])
                    })
                 (Prelude.Lists.Indexed.enumerate ds))
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.destroy⦅
              map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3) ds ⦆
              Γ
  [DEP-Divide]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {y y′ : Id} {A : Participant₁} {v v′ : Value} →
              All
              (λ section →
                 (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                  section)
                 (x ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ))
              (y ∷ y′ ∷ `∅ᶜ)
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               (((BitML.Semantics.InferenceRules._.⟨ A has v + v′ ⟩at x)
                 BitML.Semantics.InferenceRules._.∣
                 (A BitML.Semantics.InferenceRules._.auth[
                  x BitML.Semantics.InferenceRules._.▷⟨ A , v , v′ ⟩ ]))
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.divide⦅ x ▷ v , v′ ⦆
              (((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at y)
                BitML.Semantics.InferenceRules._.∣
                (BitML.Semantics.InferenceRules._.⟨ A has v′ ⟩at y′))
               BitML.Semantics.InferenceRules._.∣ Γ)
  [DEP-Donate]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {y x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v : Value} {B : Participant₁} →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ y)
              (x ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)
              Prelude.InferenceRules.──────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               (((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at x)
                 BitML.Semantics.InferenceRules._.∣
                 (A BitML.Semantics.InferenceRules._.auth[
                  x BitML.Semantics.InferenceRules._.▷ᵈ B ]))
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.donate⦅ x ▷ᵈ B ⦆
              ((BitML.Semantics.InferenceRules._.⟨ B has v ⟩at y)
               BitML.Semantics.InferenceRules._.∣ Γ)
  [DEP-Join]
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {z = z₁ : Id} {x y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v v′ : Value} →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ z₁)
              (x ∷ y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)
              Prelude.InferenceRules.────────────────────────────────────────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((((BitML.Semantics.InferenceRules._.⟨ A has v ⟩at x)
                  BitML.Semantics.InferenceRules._.∣
                  (BitML.Semantics.InferenceRules._.⟨ A has v′ ⟩at y))
                 BitML.Semantics.InferenceRules._.∣
                 (A BitML.Semantics.InferenceRules._.auth[
                  x BitML.Semantics.InferenceRules._.↔ y ▷⟨ A , v + v′ ⟩ ]))
                BitML.Semantics.InferenceRules._.∣ Γ))
              BitML.Semantics.InferenceRules._.join⦅ x ↔ y ⦆
              ((BitML.Semantics.InferenceRules._.⟨ A has v + v′ ⟩at z₁)
               BitML.Semantics.InferenceRules._.∣ Γ)
  [Delay]   : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {δ : Time}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} →
              (Prelude.Ord.Instances.Ord-ℕ Prelude.Ord.Core.Ord.> δ) 0
              Prelude.InferenceRules.─────────────────────────────────────
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
               (Γ BitML.Semantics.InferenceRules._.at t))
              BitML.Semantics.InferenceRules._.delay⦅ δ ⦆
              (Γ BitML.Semantics.InferenceRules._.at (t + δ))
  [Timeout] : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {t : Time} {v : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {i : Prelude.Lists.Indexed.Index c} →
              Prelude.InferenceRules.∙
              (Prelude.Null.Nullable.Null Prelude.Null.Monoid⇒Nullable
               (proj₁
                (BitML.Contracts.Helpers.decorations Participant₁ Honest₁
                 (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i)))
               Prelude.InferenceRules.∙
               (All (Nat._≤ t)
                (proj₂
                 (BitML.Contracts.Helpers.decorations Participant₁ Honest₁
                  (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i)))
                Prelude.InferenceRules.∙
                ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
                  ((BitML.Semantics.InferenceRules._.⟨
                    [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c i ] , v
                    ⟩at x)
                   BitML.Semantics.InferenceRules._.∣ Γ))
                 α Γ′
                 Prelude.InferenceRules.∙
                 ((BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ just x)
                  Prelude.InferenceRules.──────────────────────────────────────────────────────────────────────────────
                  (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
                   (((BitML.Semantics.InferenceRules._.⟨ c , v ⟩at x)
                     BitML.Semantics.InferenceRules._.∣ Γ)
                    BitML.Semantics.InferenceRules._.at t))
                  α (Γ′ BitML.Semantics.InferenceRules._.at t)))))
  `         : ℤ → Arith
  `_        : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  ``_       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  `true     : Predicate
  `¬_       : Predicate → Predicate
  `⟨_,_⟩at_ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              Value →
              Id →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  `⟨_has_⟩at_
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Value →
              Id →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  `⟨_∶_♯_⟩  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Secret →
              Maybe ℕ →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  a         : Secret
  act       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Action.Action Participant₁ Honest₁
  acts      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Action.Actions Participant₁ Honest₁
  acts′     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Action.Actions Participant₁ Honest₁
  act′      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Action.Action Participant₁ Honest₁
  ad        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
  ads⊆      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid
               (BitML.Semantics.Configurations.Types.Configuration Participant₁
                Honest₁)
               Data.List.Membership.Setoid.∈ Γ)
              (BitML.Properties.Helpers.allStates Participant₁ Honest₁ tr) →
              BitML.Semantics.Configurations.Helpers.advertisements Participant₁
              Honest₁ Γ
              ⊆
              BitML.Semantics.Configurations.Helpers.advertisements Participant₁
              Honest₁ tr
  advertisements
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : X Prelude.Lists.Collections.has
                  BitML.Contracts.Types.Advertisement Participant₁ Honest₁ ⦄ →
              X → List (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)
  advertise⇒
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Properties.TraceAd._.advertise⦅ ad ⦆ Γ′ →
              BitML.Properties.TraceAd.ℍ[C-Advertise]⦅ Participant₁ ↝ Honest₁ ⦆⦅
              Γ ⦆
              Γ′ ad
  advertise⇒∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceAd._.advertise⦅ ad ⦆)
              αs →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceAd.ℍ[C-Advertise]⦅ Participant₁ ↝ Honest₁ ⦆⦅
                 section ⦆
                 section₁ ad)
  advertise⦅_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  ad′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
  ad″       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
  after_⇒_  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Time →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  allStates : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (Γ↠
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              List
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  allStatesᵗ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              List
              (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁)
  allStatesᵗ⁺
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              List⁺
              (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁)
  allStatesᵗ⁺-∷
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {x′ y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {z = z₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (Γ→
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ x′) α
                 y′)
              (eq
               : (BitML.Semantics.Configurations.Types.TimedConfiguration.time Γₜ
                  ≡ BitML.Semantics.Configurations.Types.TimedConfiguration.time x′
                  ×
                  (_↭_ on
                   (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                      ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                      ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                         x)
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                      ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                         x)
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                      ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                          → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                      ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                      ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                          → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                      ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                          → Prelude.Coercions._↝_.to
                            (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                             Honest₁)
                            l
                            ++
                            Prelude.Coercions._↝_.to
                            (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                             Honest₁)
                            r
                      }))
                  (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg Γₜ)
                  (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg x′))
                 ×
                 BitML.Semantics.Configurations.Types.TimedConfiguration.time y ≡
                 BitML.Semantics.Configurations.Types.TimedConfiguration.time y′
                 ×
                 (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg y)
                 (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg y′))
              (Γ↠
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ y ]↠ αs)
                 z₁) →
              BitML.Properties.Helpers.allStatesᵗ⁺ Participant₁ Honest₁
              (Γₜ BitML.Properties.Helpers._.—→⟨ Γ→ ⟩ eq ⊢ Γ↠)
              ≡
              Γₜ ∷⁺ BitML.Properties.Helpers.allStatesᵗ⁺ Participant₁ Honest₁ Γ↠
  allStatesᵗ⁺-∷ʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′ Γₜ x y y′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (Γ↞
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x ]↠ αs)
                 y)
              (Γ←
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ y′) α
                 Γₜ′)
              (eq
               : (BitML.Semantics.Configurations.Types.TimedConfiguration.time Γₜ
                  ≡ BitML.Semantics.Configurations.Types.TimedConfiguration.time Γₜ′
                  ×
                  (_↭_ on
                   (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                      ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                      ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                         x)
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                      ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                         x)
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                      ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                          → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                      ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                          → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                      ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                          → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                      ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                          → Prelude.Coercions._↝_.to
                            (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                             Honest₁)
                            l
                            ++
                            Prelude.Coercions._↝_.to
                            (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                             Honest₁)
                            r
                      }))
                  (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg Γₜ)
                  (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg Γₜ′))
                 ×
                 BitML.Semantics.Configurations.Types.TimedConfiguration.time y ≡
                 BitML.Semantics.Configurations.Types.TimedConfiguration.time y′
                 ×
                 (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg y)
                 (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg y′)) →
              BitML.Properties.Helpers.allStatesᵗ⁺ Participant₁ Honest₁
              ((BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.`⟨ Γₜ ⟩←—
                Γ← ⊢ eq)
               Γ↞)
              ≡
              BitML.Properties.Helpers.allStatesᵗ⁺ Participant₁ Honest₁ Γ↞ ⁺∷ʳ Γₜ
  allStates⁺
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (Γ↠
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              List⁺
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  allTransitions
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (Γ↠
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              List
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ ×
               BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  allTransitionsᵗ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (Γ↠
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              List
              (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁ ×
               BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁)
  as        : Secrets
  as′       : Secrets
  as″       : Secrets
  auth-commit⇒
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {secrets = secrets₁ : List (Secret × Maybe ℕ)} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Properties.TraceAuthCommit._.auth-commit⦅ A , ad , secrets₁ ⦆
              Γ′ →
              BitML.Properties.TraceAuthCommit.ℍ[C-AuthCommit]⦅ Participant₁ ↝
              Honest₁ ⦆⦅ Γ ⦆
              Γ′ (ad , A , secrets₁)
  auth-commit⇒∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Δ : List (Secret × Maybe ℕ)}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceAuthCommit._.auth-commit⦅ A , ad , Δ ⦆)
              αs →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceAuthCommit.ℍ[C-AuthCommit]⦅ Participant₁ ↝
                 Honest₁ ⦆⦅ section ⦆
                 section₁ (ad , A , Δ))
  auth-commit⦅_,_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              List (Secret × Maybe ℕ) →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  auth-control⇒
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {x : Id}
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Properties.TraceAuthControl._.auth-control⦅ A , x ▷ d ⦆ Γ′ →
              BitML.Properties.TraceAuthControl.ℍ[C-AuthControl]⦅ Participant₁ ↝
              Honest₁ ⦆⦅ Γ ⦆
              Γ′ (A , x , d)
  auth-control⇒∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {A : Participant₁} {z = z₁ : Id}
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceAuthControl._.auth-control⦅ A , z₁ ▷ d ⦆)
              αs →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceAuthControl.ℍ[C-AuthControl]⦅ Participant₁ ↝
                 Honest₁ ⦆⦅ section ⦆
                 section₁ (A , z₁ , d))
  auth-control⦅_,_▷_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Id →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  auth-destroy⦅_,_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              (xs : Ids) →
              Prelude.Lists.Indexed.Index xs →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  auth-divide⦅_,_▷_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Id →
              Value → Value → BitML.Semantics.Label.Label Participant₁ Honest₁
  auth-donate⦅_,_▷ᵈ_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Id →
              Participant₁ → BitML.Semantics.Label.Label Participant₁ Honest₁
  auth-init⇒
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {x : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Properties.TraceAuthInit._.auth-init⦅ A , ad , x ⦆ Γ′ →
              BitML.Properties.TraceAuthInit.ℍ[C-AuthInit]⦅ Participant₁ ↝
              Honest₁ ⦆⦅ Γ ⦆
              Γ′ (A , ad , x)
  auth-init⇒∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {z = z₁ : Id}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceAuthInit._.auth-init⦅ A , ad , z₁ ⦆)
              αs →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceAuthInit.ℍ[C-AuthInit]⦅ Participant₁ ↝
                 Honest₁ ⦆⦅ section ⦆
                 section₁ (A , ad , z₁))
  auth-init⦅_,_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              Id → BitML.Semantics.Label.Label Participant₁ Honest₁
  auth-join⦅_,_↔_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Id → Id → BitML.Semantics.Label.Label Participant₁ Honest₁
  auth-rev⦅_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Secret → BitML.Semantics.Label.Label Participant₁ Honest₁
  authDecoration
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              Maybe Participant₁
  authDecorations
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              List Participant₁
  authDecorations∘remove≡[]
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              Prelude.Null.Nullable.Null Prelude.Null.Monoid⇒Nullable $
              BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁ $
              BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁ d
  authorizedActions
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : X Prelude.Lists.Collections.has
                  BitML.Semantics.Action.Action Participant₁ Honest₁ ⦄ →
              X → List (BitML.Semantics.Action.Action Participant₁ Honest₁)
  authorizedHonAds
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : X Prelude.Lists.Collections.has
                  BitML.Contracts.Types.Advertisement Participant₁ Honest₁ ⦄ →
              X → List (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)
  auth⊆part : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ d
  a′        : Secret
  a″        : Secret
  base      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (Participant₁ BitML.Properties.Lifetime.↝∗ Honest₁) c c
  base      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Properties.TraceContract._.`
               (BitML.Properties.TraceContract._.⟨ g ⟩ c))
              Γ →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Properties.TraceContract._.init⦅ g , c ⦆ Γ′
              Prelude.InferenceRules.───────────────────────────────────────────────────
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝ Γ ⦆⦅ BitML.Properties.TraceContract._.init⦅ g , c ⦆ ⦆
              Γ′ c
  c         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  cfg       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  cfgToList : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              List
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
  cfgToList-++
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Semantics.Configurations.Helpers.cfgToList Participant₁
              Honest₁ (l BitML.Semantics.Configurations.Helpers._.∣ r)
              ≡
              BitML.Semantics.Configurations.Helpers.cfgToList Participant₁
              Honest₁ l
              ++
              BitML.Semantics.Configurations.Helpers.cfgToList Participant₁
              Honest₁ r
  cfgToList-assoc
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l c r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Semantics.Configurations.Helpers.cfgToList Participant₁
              Honest₁
              ((l BitML.Semantics.Configurations.Helpers._.∣ c)
               BitML.Semantics.Configurations.Helpers._.∣ r)
              ≡
              BitML.Semantics.Configurations.Helpers.cfgToList Participant₁
              Honest₁
              (l BitML.Semantics.Configurations.Helpers._.∣
               (c BitML.Semantics.Configurations.Helpers._.∣ r))
  checkDeposit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.DepositType Participant₁ Honest₁ →
              Id →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              Maybe Value
  collectFromBase
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set} →
              (BitML.Semantics.Configurations.Types.BaseCfg Participant₁
               Honest₁ →
               List X) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              List X
  collectFromBase-++
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ I
                : BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Semantics.Configurations.Helpers.collectFromBase Participant₁
              Honest₁ (Prelude.Lists.Collections._has_.collect I)
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
              ≡
              BitML.Semantics.Configurations.Helpers.collectFromBase Participant₁
              Honest₁ (Prelude.Lists.Collections._has_.collect I) l
              ++
              BitML.Semantics.Configurations.Helpers.collectFromBase Participant₁
              Honest₁ (Prelude.Lists.Collections._has_.collect I) r
  committedPartG≡
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              (ps : List Participant₁) →
              BitML.Semantics.Configurations.Helpers.committedParticipants
              Participant₁ Honest₁ ad
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (BitML.Semantics.Configurations.Helpers._._auth[
                 BitML.Semantics.Configurations.Helpers._.♯▷ ad ])
                ps))
              ≡ ps
  committedParticipants
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              List Participant₁
  committedSingle≡
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {A : Participant₁} →
              BitML.Semantics.Configurations.Helpers.committedParticipants
              Participant₁ Honest₁ ad
              (A BitML.Semantics.Configurations.Helpers._.auth[
               BitML.Semantics.Configurations.Helpers._.♯▷ ad ])
              ≡ [ A ]
  committed⇒authAd
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁} →
              (setoid Participant₁ Data.List.Membership.Setoid.∈ A)
              (BitML.Contracts.Types.Hon Participant₁ Honest₁) →
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (setoid Participant₁ Data.List.Membership.Setoid.∈ A)
              (BitML.Semantics.Configurations.Helpers.committedParticipants
               Participant₁ Honest₁ ad Γ) →
              (setoid (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ ad)
              (BitML.Semantics.Configurations.Helpers.authorizedHonAds
               Participant₁ Honest₁ Γ)
  committed⇒authCommit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (setoid Participant₁ Data.List.Membership.Setoid.∈ A)
              (BitML.Semantics.Configurations.Helpers.committedParticipants
               Participant₁ Honest₁ ad Γ) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (A BitML.Semantics.Configurations.Helpers._.auth[
               BitML.Semantics.Configurations.Helpers._.♯▷ ad ])
              Γ
  control∙left-composite
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′)
              (isC
               : BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st) →
              Prelude.InferenceRules.────────────────────────────────────────────────────────────
              (BitML.Semantics.Configurations.Helpers.IsComposite Participant₁
               Honest₁
               $
               (BitML.Semantics.Configurations.Helpers.Split-∣ Participant₁
                Honest₁
                Prelude.Split._-splitsInto-_.∙left)
               ((record { split = λ _ → Γ , Γ′ }
                 Prelude.Split._-splitsInto-_.∙left)
                st
                ,
                BitML.Semantics.RuleMatching.isControl⇒IsComposite Participant₁
                Honest₁ st isC))
  cv        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Label Participant₁ Honest₁ → Maybe Id
  cvDestroys
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {v : Value} {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ) →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               ((BitML.Properties.Helpers._.⟨ [ d ] , v ⟩at x)
                BitML.Properties.Helpers._.∣ Γ))
              α Γ′ →
              BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ just x →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ′)
  cv≡⇒st    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′) →
              Prelude.InferenceRules.∙
              (Is-just (BitML.Semantics.Label.cv Participant₁ Honest₁ α)
               Prelude.InferenceRules.─────────────────
               (BitML.Semantics.RuleMatching.isWithdraw Participant₁ Honest₁ st ⊎
                BitML.Semantics.RuleMatching.isPut Participant₁ Honest₁ st ⊎
                BitML.Semantics.RuleMatching.isSplit Participant₁ Honest₁ st ⊎
                BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st))
  c′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  c″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  c⇒x       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.BaseCfg Participant₁
                 Honest₁} →
              Prelude.Coercions._⁇_↝_.⌞
              BitML.Semantics.Configurations.Helpers.Cfg↝BaseCfg Participant₁
              Honest₁
              ⌟
              (BitML.Properties.Helpers._.⟨ c , v ⟩at x)
              ≡ Γ →
              (setoid (Secret ⊎ String) Data.List.Membership.Setoid.∈ inj₂ x)
              (BitML.Contracts.Helpers.names Participant₁ Honest₁ Γ)
  c∈vcis⇒   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              {vcis
               : List
                 (Value ×
                  BitML.Contracts.Types.Contracts Participant₁ Honest₁ × Id)} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Semantics.Configurations.Helpers._.⟨ c , v ⟩at x)
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (Prelude.Nary.uncurry₃ $
                 flip BitML.Semantics.Configurations.Helpers.⟨_,_⟩at_)
                vcis)) →
              (setoid
               (List (BitML.Contracts.Types.Contract Participant₁ Honest₁))
               Data.List.Membership.Setoid.∈ c)
              (proj₁ ((λ r → proj₂ r) $ Prelude.Lists.Core.unzip₃ vcis))
  c∈vcis⇒′  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              {vcis
               : List
                 (Value ×
                  BitML.Contracts.Types.Contracts Participant₁ Honest₁ × Id)} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Semantics.Configurations.Helpers._.⟨ c , v ⟩at x)
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (Prelude.Nary.uncurry₃ $
                 flip BitML.Semantics.Configurations.Helpers.⟨_,_⟩at_)
                vcis)) →
              (setoid
               (List (BitML.Contracts.Types.Contract Participant₁ Honest₁))
               Data.List.Membership.Setoid.∈ c)
              (map (λ r → proj₂ r)
               (zip (proj₁ (Prelude.Lists.Core.unzip₃ vcis))
                (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ vcis)))))
  c∈⇒x∈     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              (Γ
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ
              Prelude.InferenceRules.──────────────────
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ)
  c∈⇒x∈∘∈ᶜ-++⁺ʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              {Γ′ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (c∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ′) →
              (BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁
               (Γ BitML.Properties.Helpers._.∣ Γ′)
               ∘
               BitML.Semantics.Configurations.Helpers.∈ᶜ-++⁺ʳ Participant₁ Honest₁
               Γ Γ′)
              c∈
              ≡
              (BitML.Semantics.Configurations.Helpers.∈-ids-++⁺ʳ Participant₁
               Honest₁ Γ Γ′
               ∘ BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ′)
              c∈
  c∈⇒x∈∘∈ᶜ-++⁺ˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (c∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ) →
              (BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁
               (Γ BitML.Properties.Helpers._.∣ Γ′)
               ∘
               BitML.Semantics.Configurations.Helpers.∈ᶜ-++⁺ˡ Participant₁ Honest₁
               Γ Γ′)
              c∈
              ≡
              (BitML.Semantics.Configurations.Helpers.∈-ids-++⁺ˡ Participant₁
               Honest₁ Γ Γ′
               ∘ BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ)
              c∈
  d         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  decorations
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              List Participant₁ × List Time
  decorations∘remove≡[]
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Helpers.decorations⊎ Participant₁ Honest₁
              (BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               d)
              ≡ `∅ᶜ
  decorations⊎
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              List (Participant₁ ⊎ Time)
  delay⦅_⦆  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Time → BitML.Semantics.Label.Label Participant₁ Honest₁
  deposits  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : X Prelude.Lists.Collections.has
                  BitML.Contracts.Types.DepositRef Participant₁ Honest₁ ⦄ →
              X → List (BitML.Contracts.Types.DepositRef Participant₁ Honest₁)
  deposits⊆namesʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁} {v : Value}
              {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (setoid (Σ Participant₁ (λ v₁ → Σ ℕ (λ v₂ → String)))
               Data.List.Membership.Setoid.∈ (A , v , x))
              (BitML.Contracts.Helpers.deposits Participant₁ Honest₁ Γ) →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ Γ)
  deposits⊆⇒namesʳ⊆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              BitML.Contracts.Helpers.deposits Participant₁ Honest₁ ad ⊆
              BitML.Contracts.Helpers.deposits Participant₁ Honest₁ Γ →
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ ad ⊆
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ Γ
  deposit∈Γ⇒namesʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁} {v : Value}
              {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Semantics.Configurations.Helpers._.⟨ A has v ⟩at x) Γ →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ Γ)
  destroy⦅_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Ids → BitML.Semantics.Label.Label Participant₁ Honest₁
  destruct-∈-ids-++
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {x : Id}
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              (x∈
               : (setoid String Data.List.Membership.Setoid.∈ x)
                 (BitML.Contracts.Helpers.ids Participant₁ Honest₁
                  (l BitML.Semantics.Configurations.Helpers._.∣ r))) →
              ∃
              (λ x∈ˡ →
                 x∈ ≡
                 BitML.Semantics.Configurations.Helpers.∈-ids-++⁺ˡ Participant₁
                 Honest₁ l r x∈ˡ)
              ⊎
              ∃
              (λ x∈ʳ →
                 x∈ ≡
                 BitML.Semantics.Configurations.Helpers.∈-ids-++⁺ʳ Participant₁
                 Honest₁ l r x∈ʳ)
  destruct-∈ᶜ-++
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁}
              (x∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 x (Γ BitML.Semantics.Configurations.Helpers._.∣ Γ′)) →
              ∃
              (λ x∈ˡ →
                 x∈ ≡
                 BitML.Semantics.Configurations.Helpers.∈ᶜ-++⁺ˡ Participant₁ Honest₁
                 Γ Γ′ x∈ˡ)
              ⊎
              ∃
              (λ x∈ʳ →
                 x∈ ≡
                 BitML.Semantics.Configurations.Helpers.∈ᶜ-++⁺ʳ Participant₁ Honest₁
                 Γ Γ′ x∈ʳ)
  divide⦅_▷_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id →
              Value → Value → BitML.Semantics.Label.Label Participant₁ Honest₁
  donate⦅_▷ᵈ_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id →
              Participant₁ → BitML.Semantics.Label.Label Participant₁ Honest₁
  ds        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  ds′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  ds″       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  d′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  d″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  d∗≢auth   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {A : Participant₁}
              {d′ : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁ d
              ≢ (A BitML.Properties.TraceContract._.⇒ d′)
  d∗≢time   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {t : Time}
              {d′ : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁ d
              ≢ (BitML.Properties.TraceContract._.after t ⇒ d′)
  focusOn   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁) →
              List (BitML.Semantics.Label.Label Participant₁ Honest₁)
  g         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
  getDeposit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ g
              Prelude.Lists.Mappings.↦
              Σ-syntax (BitML.Contracts.Types.DepositRef Participant₁ Honest₁)
              (λ d →
                 (setoid Participant₁ Data.List.Membership.Setoid.∈ proj₁ d)
                 (BitML.Contracts.Helpers.participants Participant₁ Honest₁ g))
  getName   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁} {v : Value}
              {x : Id}
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              (setoid (Σ Participant₁ (λ v₁ → Σ ℕ (λ v₂ → String)))
               Data.List.Membership.Setoid.∈ (A , v , x))
              (BitML.Contracts.Helpers.persistentDeposits Participant₁ Honest₁
               g) →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ g)
  g′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
  g″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁
  h-subᵈ    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d d′ : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subtermsᵈ′ Participant₁ Honest₁ d′) →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               d)
              (BitML.Contracts.Helpers.subtermsᵈ⁺ Participant₁ Honest₁ d′)
  h-subᵛ    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subtermsᵛ′ Participant₁ Honest₁ vcs) →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               d)
              (BitML.Contracts.Helpers.subtermsᵛ⁺ Participant₁ Honest₁ vcs)
  h-subᶜ    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {ds : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ ds) →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               d)
              (BitML.Contracts.Helpers.subtermsᶜ⁺ Participant₁ Honest₁ ds)
  h-sub‼    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {i : Prelude.Lists.Indexed.Index c} →
              BitML.Contracts.Helpers.subtermsᵈ′ Participant₁ Honest₁
              (BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               (c Prelude.Lists.Indexed.‼ i))
              ⊆ BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ c
  h-sub↝    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c c′ →
              BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ c′ ⊆
              BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ c
  h-sub↝∗   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (Participant₁ BitML.Properties.Lifetime.↝∗ Honest₁) c c′ →
              BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ c′ ⊆
              BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ c
  h-sub∗    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Helpers.subtermsᵈ′ Participant₁ Honest₁
              (BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               d)
              ⊆ BitML.Contracts.Helpers.subtermsᵈ′ Participant₁ Honest₁ d
  h-sub∙↝∗  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (Participant₁ BitML.Properties.Lifetime.∙↝∗ Honest₁) ad c →
              c ⊆ BitML.Contracts.Helpers.subtermsᵃ′ Participant₁ Honest₁ ad
  ids       : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : X Prelude.Lists.Collections.has Name ⦄ →
              X → Ids
  ids-++    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Contracts.Helpers.ids Participant₁ Honest₁
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
              ≡
              BitML.Contracts.Helpers.ids Participant₁ Honest₁ l ++
              BitML.Contracts.Helpers.ids Participant₁ Honest₁ r
  init⇒     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Properties.TraceInit._.init⦅ g , c ⦆ Γ′ →
              BitML.Properties.TraceInit.ℍ[C-Init]⦅ Participant₁ ↝ Honest₁ ⦆⦅ Γ ⦆
              Γ′ (BitML.Properties.TraceInit._.⟨ g ⟩ c)
  init⇒∗    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceInit._.init⦅ g , c ⦆)
              αs →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceInit.ℍ[C-Init]⦅ Participant₁ ↝ Honest₁ ⦆⦅
                 section ⦆
                 section₁ (BitML.Properties.TraceInit._.⟨ g ⟩ c))
  init⦅_,_⦆ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  innerCI   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′)
              {_
               : BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st} →
              ∃ Prelude.Lists.Indexed.Index
  innerCIₜ  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              {_
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ} →
              ∃ Prelude.Lists.Indexed.Index
  innerDₜ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              {_
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ} →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  innerL    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′)
              {_
               : BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st} →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  innerLₜ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              {_
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ} →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  innerStep : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′)
              {p
               : BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               BitML.Semantics.RuleMatching.innerL Participant₁ Honest₁ st)
              α Γ′
  innerStepₜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t′ : Time}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 (Γ′ BitML.Semantics.RuleMatching._.at t′))
              {p
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→
               BitML.Semantics.RuleMatching.innerLₜ Participant₁ Honest₁ stₜ)
              α Γ′
  innerVₜ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              {_
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ} →
              Value
  innerXₜ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              {_
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ} →
              Id
  innerΓₜ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              {_
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ} →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁
  isAction  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              Pred₀
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
               Γₜ′)
  isControl : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Pred₀
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
               Γ′)
  isControl⇒IsComposite
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′) →
              Prelude.InferenceRules.∙
              (BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st
               Prelude.InferenceRules.──────────────────────
               BitML.Semantics.Configurations.Helpers.IsComposite Participant₁
               Honest₁
               ((BitML.Semantics.RuleMatching.Split-step Participant₁ Honest₁
                 Prelude.Split._-splitsInto-_.∙left)
                st))
  isControl⇒cv≡
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′)
              {_
               : BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st} →
              Is-just (BitML.Semantics.Label.cv Participant₁ Honest₁ α)
  isDelay   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              Pred₀
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
               Γₜ′)
  isPersistent
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.TDepositRef Participant₁ Honest₁ →
              Maybe (BitML.Contracts.Types.DepositRef Participant₁ Honest₁)
  isPut     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Pred₀
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
               Γ′)
  isPut⇒¬isControl
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′) →
              BitML.Semantics.RuleMatching.isPut Participant₁ Honest₁ st →
              ¬ BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st
  isSplit   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Pred₀
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
               Γ′)
  isSplit⇒¬isControl
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′) →
              BitML.Semantics.RuleMatching.isSplit Participant₁ Honest₁ st →
              ¬ BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st
  isTimeout : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              Pred₀
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
               Γₜ′)
  isVolatile
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.TDepositRef Participant₁ Honest₁ →
              Maybe (BitML.Contracts.Types.DepositRef Participant₁ Honest₁)
  isWithdraw
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Pred₀
              ((Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
               Γ′)
  isWithdraw⇒¬isControl
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (st
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ) α
                 Γ′) →
              BitML.Semantics.RuleMatching.isWithdraw Participant₁ Honest₁ st →
              ¬ BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ st
  join⦅_↔_⦆ : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id → Id → BitML.Semantics.Label.Label Participant₁ Honest₁
  labels    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : X Prelude.Lists.Collections.has
                  BitML.Semantics.Label.Label Participant₁ Honest₁ ⦄ →
              X → BitML.Semantics.Label.Labels Participant₁ Honest₁
  lookupSecretLen
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Secret →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Maybe ℤ
  mapMaybe∘collectFromBase-++
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X Y : Set}
              ⦃ I
                : BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄
              (g : X → Maybe Y)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              mapMaybe g
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I)
               (l BitML.Semantics.Configurations.Helpers._.∣ r))
              ≡
              mapMaybe g
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I) l)
              ++
              mapMaybe g
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I) r)
  map⦅proj₁⦆∘zip
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A B : Set} {xs : List A}
              {ys : List B} →
              map (λ r → proj₁ r) (zip xs ys) ⊆ xs
  map⦅proj₂⦆∘zip
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A B : Set} {xs : List A}
              {ys : List B} →
              map (λ r → proj₂ r) (zip xs ys) ⊆ ys
  match-authDestroy
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {xs : Ids}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {j′ : Prelude.Lists.Indexed.Index xs} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Semantics.RuleMatching._.auth-destroy⦅ A , xs , j′ ⦆ Γ′
              Prelude.InferenceRules.───────────────────────────────────────────
              ∃
              (λ ds →
                 ∃
                 (λ Γ₀ →
                    ∃
                    (λ y →
                       ∃
                       (λ j →
                          Γ ≡
                          ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                           (map
                            (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching.⟨_has_⟩at_) ds)
                           BitML.Semantics.RuleMatching._.∣ Γ₀)
                          ×
                          Γ′ ≡
                          (((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                            (map
                             (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching.⟨_has_⟩at_) ds)
                            BitML.Semantics.RuleMatching._.∣
                            (proj₁ (ds Prelude.Lists.Indexed.‼ j)
                             BitML.Semantics.RuleMatching._.auth[
                             map (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3) ds
                             BitML.Semantics.RuleMatching._., Prelude.Lists.Indexed.‼-map j ▷ᵈˢ
                             y
                             ]))
                           BitML.Semantics.RuleMatching._.∣ Γ₀)
                          ×
                          A ≡ proj₁ (ds Prelude.Lists.Indexed.‼ j) ×
                          ∃
                          (λ xs≡ →
                             j′ ≡
                             subst Prelude.Lists.Indexed.Index (sym xs≡)
                             (Prelude.Lists.Indexed.‼-map j)
                             ×
                             (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ y)
                             (BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ₀))))))
  match-put : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {xs : Ids} {as : Secrets} {y : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (step₁
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
                 BitML.Semantics.RuleMatching._.put⦅ xs , as , y ⦆ Γ′) →
              Prelude.InferenceRules.∙
              ((¬
                BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ step₁)
               Prelude.InferenceRules.───────────────────────────────────────────
               ∃
               (λ ds →
                  ∃
                  (λ ss →
                     ∃
                     (λ p →
                        ∃
                        (λ c →
                           ∃
                           (λ v →
                              ∃
                              (λ Γ₀ →
                                 ∃
                                 (λ z₁ →
                                    Γ ≡
                                    ((BitML.Semantics.RuleMatching._.⟨
                                      [ BitML.Semantics.RuleMatching._.put xs &reveal as if p ⇒ c ]
                                      , v ⟩at y)
                                     BitML.Semantics.RuleMatching._.∣
                                     ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                      (map
                                       (Prelude.Nary.uncurry₃
                                        BitML.Semantics.RuleMatching.⟨_has_⟩at_)
                                       ds)
                                      BitML.Semantics.RuleMatching._.∣
                                      ((BitML.Semantics.Configurations.Types.|| Participant₁)
                                       Honest₁
                                       (map
                                        (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                        ss)
                                       BitML.Semantics.RuleMatching._.∣ Γ₀)))
                                    ×
                                    Γ′ ≡
                                    ((BitML.Semantics.RuleMatching._.⟨ c ,
                                      v + sum (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ds))) ⟩at z₁)
                                     BitML.Semantics.RuleMatching._.∣
                                     ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                      (map
                                       (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                       ss)
                                      BitML.Semantics.RuleMatching._.∣ Γ₀))
                                    ×
                                    xs ≡ proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ ds)) ×
                                    as ≡ proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ss)) ×
                                    (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                                     z₁)
                                    (y ∷
                                     BitML.Contracts.Helpers.ids Participant₁ Honest₁
                                     ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                      (map
                                       (Prelude.Nary.uncurry₃
                                        BitML.Semantics.RuleMatching.⟨_has_⟩at_)
                                       ds)
                                      BitML.Semantics.RuleMatching._.∣
                                      ((BitML.Semantics.Configurations.Types.|| Participant₁)
                                       Honest₁
                                       (map
                                        (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                        ss)
                                       BitML.Semantics.RuleMatching._.∣ Γ₀)))
                                    ×
                                    (BitML.Semantics.Predicate.⟦ Participant₁ ⟧ Honest₁) p
                                    ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                     (map (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                      ss))
                                    ≡ just true))))))))
  match-putₜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {xs : Ids} {as : Secrets} {y : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (stepₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
                  (Γ BitML.Semantics.RuleMatching._.at t))
                 BitML.Semantics.RuleMatching._.put⦅ xs , as , y ⦆
                 (Γ′ BitML.Semantics.RuleMatching._.at t))
              (isT
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stepₜ) →
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              ∃
              (λ ds →
                 ∃
                 (λ ss →
                    ∃
                    (λ p →
                       ∃
                       (λ c →
                          ∃
                          (λ v →
                             ∃
                             (λ Γ₀ →
                                ∃
                                (λ z₁ →
                                   (Participant₁ BitML.Contracts.Helpers.≡⋯∶ Honest₁)
                                   (BitML.Semantics.RuleMatching.innerDₜ Participant₁ Honest₁ stepₜ)
                                   (BitML.Semantics.RuleMatching._.put xs &reveal as if p ⇒ c)
                                   ×
                                   BitML.Semantics.RuleMatching.innerVₜ Participant₁ Honest₁ stepₜ ≡
                                   v
                                   ×
                                   BitML.Semantics.RuleMatching.innerXₜ Participant₁ Honest₁ stepₜ ≡
                                   y
                                   ×
                                   BitML.Semantics.RuleMatching.innerΓₜ Participant₁ Honest₁ stepₜ ≡
                                   ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                    (map
                                     (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching.⟨_has_⟩at_)
                                     ds)
                                    BitML.Semantics.RuleMatching._.∣
                                    ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                     (map (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                      ss)
                                     BitML.Semantics.RuleMatching._.∣ Γ₀))
                                   ×
                                   Γ′ ≡
                                   ((BitML.Semantics.RuleMatching._.⟨ c ,
                                     v + sum (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ds))) ⟩at z₁)
                                    BitML.Semantics.RuleMatching._.∣
                                    ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                     (map (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                      ss)
                                     BitML.Semantics.RuleMatching._.∣ Γ₀))
                                   ×
                                   xs ≡ proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ ds)) ×
                                   as ≡ proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ ss)) ×
                                   (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ z₁)
                                   (y ∷
                                    BitML.Contracts.Helpers.ids Participant₁ Honest₁
                                    ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                     (map
                                      (Prelude.Nary.uncurry₃
                                       BitML.Semantics.RuleMatching.⟨_has_⟩at_)
                                      ds)
                                     BitML.Semantics.RuleMatching._.∣
                                     ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                      (map
                                       (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                       ss)
                                      BitML.Semantics.RuleMatching._.∣ Γ₀)))
                                   ×
                                   (BitML.Semantics.Predicate.⟦ Participant₁ ⟧ Honest₁) p
                                   ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                                    (map (Prelude.Nary.uncurry₃ BitML.Semantics.RuleMatching._∶_♯_)
                                     ss))
                                   ≡ just true)))))))
  match-split
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {y : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (step₁
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
                 BitML.Semantics.RuleMatching._.split⦅ y ⦆ Γ′) →
              Prelude.InferenceRules.∙
              ((¬
                BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ step₁)
               Prelude.InferenceRules.───────────────────────────────────────────
               ∃
               (λ vcis →
                  ∃
                  (λ Γ₀ →
                     ∃
                     (λ y₁ →
                        Γ ≡
                        ((BitML.Semantics.RuleMatching._.⟨
                          [
                          BitML.Semantics.RuleMatching.split
                          (zip (proj₁ (Prelude.Lists.Core.unzip₃ vcis))
                           (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ vcis))))
                          ]
                          , sum (proj₁ (Prelude.Lists.Core.unzip₃ vcis)) ⟩at y₁)
                         BitML.Semantics.RuleMatching._.∣ Γ₀)
                        ×
                        Γ′ ≡
                        ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                         (map
                          (Prelude.Nary.uncurry₃ $
                           flip BitML.Semantics.RuleMatching.⟨_,_⟩at_)
                          vcis)
                         BitML.Semantics.RuleMatching._.∣ Γ₀)
                        ×
                        All
                        (λ section →
                           (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                            section)
                           (y₁ ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ₀))
                        (proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ vcis)))))))
  match-splitₜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {y : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (stepₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
                  (Γ BitML.Semantics.RuleMatching._.at t))
                 BitML.Semantics.RuleMatching._.split⦅ y ⦆
                 (Γ′ BitML.Semantics.RuleMatching._.at t))
              (isT
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stepₜ) →
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              ∃
              (λ vcis →
                 ∃
                 (λ Γ₀ →
                    ∃
                    (λ y₁ →
                       (Participant₁ BitML.Contracts.Helpers.≡⋯∶ Honest₁)
                       (BitML.Semantics.RuleMatching.innerDₜ Participant₁ Honest₁ stepₜ)
                       (BitML.Semantics.RuleMatching.split
                        (zip (proj₁ (Prelude.Lists.Core.unzip₃ vcis))
                         (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ vcis)))))
                       ×
                       BitML.Semantics.RuleMatching.innerVₜ Participant₁ Honest₁ stepₜ ≡
                       sum (proj₁ (Prelude.Lists.Core.unzip₃ vcis))
                       ×
                       BitML.Semantics.RuleMatching.innerXₜ Participant₁ Honest₁ stepₜ ≡
                       y₁
                       ×
                       BitML.Semantics.RuleMatching.innerΓₜ Participant₁ Honest₁ stepₜ ≡
                       Γ₀
                       ×
                       Γ′ ≡
                       ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                        (map
                         (Prelude.Nary.uncurry₃ $
                          flip BitML.Semantics.RuleMatching.⟨_,_⟩at_)
                         vcis)
                        BitML.Semantics.RuleMatching._.∣ Γ₀)
                       ×
                       All
                       (λ section →
                          (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉
                           section)
                          (y₁ ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ₀))
                       (proj₂ (proj₂ (Prelude.Lists.Core.unzip₃ vcis))))))
  match-withdraw
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {v : Value} {y : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (step₁
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
                 BitML.Semantics.RuleMatching._.withdraw⦅ A , v , y ⦆ Γ′) →
              Prelude.InferenceRules.∙
              ((¬
                BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁ step₁)
               Prelude.InferenceRules.───────────────────────────────────────────
               ∃
               (λ Γ₀ →
                  ∃
                  (λ x →
                     Γ ≡
                     ((BitML.Semantics.RuleMatching._.⟨
                       [ BitML.Semantics.RuleMatching.withdraw A ] , v ⟩at y)
                      BitML.Semantics.RuleMatching._.∣ Γ₀)
                     ×
                     Γ′ ≡
                     ((BitML.Semantics.RuleMatching._.⟨ A has v ⟩at x)
                      BitML.Semantics.RuleMatching._.∣ Γ₀)
                     ×
                     (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
                     (y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ₀))))
  match-withdrawₜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {A : Participant₁} {v : Value} {y : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (stepₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
                  (Γ BitML.Semantics.RuleMatching._.at t))
                 BitML.Semantics.RuleMatching._.withdraw⦅ A , v , y ⦆
                 (Γ′ BitML.Semantics.RuleMatching._.at t))
              (isT
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stepₜ) →
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              ∃
              (λ Γ₀ →
                 ∃
                 (λ x →
                    (Participant₁ BitML.Contracts.Helpers.≡⋯∶ Honest₁)
                    (BitML.Semantics.RuleMatching.innerDₜ Participant₁ Honest₁ stepₜ)
                    (BitML.Semantics.RuleMatching.withdraw A)
                    ×
                    BitML.Semantics.RuleMatching.innerVₜ Participant₁ Honest₁ stepₜ ≡ v
                    ×
                    BitML.Semantics.RuleMatching.innerXₜ Participant₁ Honest₁ stepₜ ≡ y
                    ×
                    BitML.Semantics.RuleMatching.innerΓₜ Participant₁ Honest₁ stepₜ ≡
                    Γ₀
                    ×
                    Γ′ ≡
                    ((BitML.Semantics.RuleMatching._.⟨ A has v ⟩at x)
                     BitML.Semantics.RuleMatching._.∣ Γ₀)
                    ×
                    (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
                    (y ∷ BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ₀)))
  mentionedAd
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              Maybe (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)
  mkCollect : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set} →
              ((e : BitML.Contracts.Types.Contract Participant₁ Honest₁) →
               ((e′ : BitML.Contracts.Induction.ℂ Participant₁ Honest₁) →
                (Participant₁ BitML.Contracts.Induction.≺ Honest₁) e′
                (BitML.Contracts.Helpers.C e) →
                List X) →
               List X) →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁ → List X
  n         : ℕ
  names     : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : X Prelude.Lists.Collections.has Name ⦄ →
              X → Names
  names-put : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              (r
               : BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
                 ad) →
              All
              (λ { (xs , as , p)
                     → Unique xs ×
                       BitML.Contracts.Helpers.secrets Participant₁ Honest₁ p ⊆ as
                 })
              (BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ $
               BitML.Contracts.Types.Advertisement.C ad)
  names-uniq
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁} →
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
              ad →
              Unique
              (BitML.Contracts.Helpers.names Participant₁ Honest₁ $
               BitML.Contracts.Types.Advertisement.G ad)
  names-⊆   : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁} →
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
              ad →
              BitML.Contracts.Helpers.names Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.C ad)
              ⊆
              BitML.Contracts.Helpers.names Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.G ad)
  namesʳ    : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : X Prelude.Lists.Collections.has Name ⦄ →
              X → Ids
  namesʳ-∥map-authCommit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁}
              {secrets = secrets₁ : List (Secret × Maybe ℕ)} →
              proj₁ (unzip secrets₁) ⊆
              BitML.Contracts.Helpers.namesˡ Participant₁ Honest₁
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map (uncurry (BitML.Semantics.Configurations.Helpers.⟨_∶_♯_⟩ A))
                secrets₁))
  namesʳ-∥map-authDestroy
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (ds : List (Participant₁ × Value × Id)) →
              map ((λ r → proj₂ r) ∘ (λ r → proj₂ r)) ds ⊆
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (Prelude.Nary.uncurry₃
                 BitML.Semantics.Configurations.Helpers.⟨_has_⟩at_)
                ds))
  namesʳ-∥map-destroy
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {y : Id}
              (ds : List (Participant₁ × Value × Id)) →
              map ((λ r → proj₂ r) ∘ (λ r → proj₂ r)) ds ⊆
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (λ { (i , Aᵢ , vᵢ , xᵢ)
                       → (BitML.Semantics.Configurations.Helpers._.⟨ Aᵢ has vᵢ ⟩at xᵢ)
                         BitML.Semantics.Configurations.Helpers._.∣
                         (Aᵢ BitML.Semantics.Configurations.Helpers._.auth[
                          map ((λ r → proj₂ r) ∘ (λ r → proj₂ r)) ds
                          BitML.Semantics.Configurations.Helpers._.,
                          Prelude.Lists.Indexed.‼-map i ▷ᵈˢ y
                          ])
                   })
                (Prelude.Lists.Indexed.enumerate ds)))
  namesʳ⊆deposits
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {x : Id}
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ g) →
              Σ Participant₁
              (λ A →
                 Σ Value
                 (λ v →
                    (setoid (Σ Participant₁ (λ v₁ → Σ ℕ (λ v₂ → String)))
                     Data.List.Membership.Setoid.∈ (A , v , x))
                    (BitML.Contracts.Helpers.deposits Participant₁ Honest₁ g)))
  namesˡ    : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : X Prelude.Lists.Collections.has Name ⦄ →
              X → Secrets
  namesˡ⇒part
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {a : Secret}
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              (setoid String Data.List.Membership.Setoid.∈ a)
              (BitML.Contracts.Helpers.namesˡ Participant₁ Honest₁ g) →
              Σ Participant₁
              (λ section →
                 (setoid Participant₁ Data.List.Membership.Setoid.∈ section)
                 (BitML.Contracts.Helpers.nub-participants Participant₁ Honest₁ g))
  namesℂ    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁ → List Name
  names⊆secretsOf
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {a : Secret}
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁}
              (a∈
               : (setoid String Data.List.Membership.Setoid.∈ a)
                 (BitML.Contracts.Helpers.namesˡ Participant₁ Honest₁ g)) →
              (setoid String Data.List.Membership.Setoid.∈ a)
              (BitML.Contracts.Helpers.secretsOfᵖ Participant₁ Honest₁
               ((λ r → proj₁ r) $
                BitML.Contracts.Helpers.namesˡ⇒part Participant₁ Honest₁ a∈)
               g)
  nub-participants
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : X Prelude.Lists.Collections.has Participant₁ ⦄ →
              X → List Participant₁
  p         : Predicate
  participants
            : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : X Prelude.Lists.Collections.has Participant₁ ⦄ →
              X → List Participant₁
  participants-⊆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁} →
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
              ad →
              BitML.Contracts.Helpers.participants Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.G ad)
              ++
              BitML.Contracts.Helpers.participants Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.C ad)
              ⊆
              BitML.Contracts.Helpers.persistentParticipants Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.G ad)
  participantsℂ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁ →
              List Participant₁
  persistent
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.DepositType Participant₁ Honest₁
  persistentDeposits
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              List (BitML.Contracts.Types.DepositRef Participant₁ Honest₁)
  persistentNamesʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ → Ids
  persistentNames⊆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              BitML.Contracts.Helpers.persistentNamesʳ Participant₁ Honest₁ g ⊆
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ g
  persistentParticipants
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              List Participant₁
  persistentParticipants⊆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              BitML.Contracts.Helpers.persistentParticipants Participant₁ Honest₁
              g
              ⊆ BitML.Contracts.Helpers.participants Participant₁ Honest₁ g
  persistentValue
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ → Value
  put_&reveal_if_⇒_
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Ids →
              Secrets →
              Predicate →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  putComponents
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : X Prelude.Lists.Collections.has
                  BitML.Contracts.Helpers.PutComponent Participant₁ Honest₁ ⦄ →
              X →
              List (BitML.Contracts.Helpers.PutComponent Participant₁ Honest₁)
  putComponentsℂ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁ →
              List (BitML.Contracts.Helpers.PutComponent Participant₁ Honest₁)
  put↝      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {xs : Ids} {as : Secrets} {p : Predicate}
              {c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {i : Prelude.Lists.Indexed.Index c} →
              (BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c i ≡
               (BitML.Properties.Lifetime._.put xs &reveal as if p ⇒ c′))
              Prelude.InferenceRules.────────────────────────────────────
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c c′
  put⦅_,_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Ids →
              Secrets → Id → BitML.Semantics.Label.Label Participant₁ Honest₁
  p′        : Predicate
  remove-names
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Helpers.names Participant₁ Honest₁ d ≡
              BitML.Contracts.Helpers.names Participant₁ Honest₁
              (BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               d)
  remove-putComponents
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ d ≡
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁
              (BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁
               d)
  removeTopDecorations
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  removeTopDecorations-idemp
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Alg≡.IdempotentFun
              (BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁)
  secrets   : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _ : X Prelude.Lists.Collections.has Name ⦄ →
              X → Secrets
  secrets-++
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Contracts.Helpers.secrets Participant₁ Honest₁
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
              ≡
              BitML.Contracts.Helpers.secrets Participant₁ Honest₁ l ++
              BitML.Contracts.Helpers.secrets Participant₁ Honest₁ r
  secretsOfᵖ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Participant₁ →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ → Secrets
  secretsOfᶜᶠ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Participant₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              Secrets
  split     : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁ →
              BitML.Contracts.Types.Contract Participant₁ Honest₁
  splitTraceˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″ Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                  αs)
                 Γₜ″)
              (xy∈
               : (setoid
                  (Σ
                   (BitML.Semantics.Configurations.Types.TimedConfiguration
                    Participant₁ Honest₁)
                   (λ v →
                      BitML.Semantics.Configurations.Types.TimedConfiguration
                      Participant₁ Honest₁))
                  Data.List.Membership.Setoid.∈ (Γₜ , Γₜ′))
                 (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
                  tr)) →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
               take (F.toℕ $ L.Any.index xy∈) αs)
              Γₜ
  splits-OK : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁} →
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
              ad →
              T $
              BitML.Contracts.Validity.splitsOK Participant₁ Honest₁
              (BitML.Contracts.Types.Advertisement.G ad)
              (BitML.Contracts.Types.Advertisement.C ad)
  splitsOK  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ → Bool
  split↝    : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁}
              {c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {i : Prelude.Lists.Indexed.Index c} →
              Prelude.InferenceRules.∙
              ((BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c i ≡
                BitML.Properties.Lifetime.split vcs)
               Prelude.InferenceRules.∙
               ((setoid
                 (List (BitML.Contracts.Types.Contract Participant₁ Honest₁))
                 Data.List.Membership.Setoid.∈ c′)
                (map (λ r → proj₂ r) vcs)
                Prelude.InferenceRules.────────────────────────────────────
                (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c c′))
  split⦅_⦆  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Id → BitML.Semantics.Label.Label Participant₁ Honest₁
  step      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c c′ c″ : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c c′ →
              (Participant₁ BitML.Properties.Lifetime.↝∗ Honest₁) c′ c″ →
              (Participant₁ BitML.Properties.Lifetime.↝∗ Honest₁) c c″
  step-control
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {Γ L
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁} {x : Id}
              {v : Value}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {i : Prelude.Lists.Indexed.Index c′} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ L →
              BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ just x →
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝
              (BitML.Properties.TraceContract._.⟨
               [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c′ i ] ,
               v ⟩at x)
              BitML.Properties.TraceContract._.∣ L
              ⦆⦅ α ⦆
              Γ′ c
              Prelude.InferenceRules.───────────────────────────────────────────────────────────────────────────────────────
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝
              ((BitML.Properties.TraceContract._.⟨ c′ , v ⟩at x)
               BitML.Properties.TraceContract._.∣
               (BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (BitML.Properties.TraceContract._._auth[
                 x BitML.Properties.TraceContract._.▷
                 BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c′ i
                 ])
                (Prelude.Lists.Dec.nub $
                 BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁
                 (BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c′ i))))
              BitML.Properties.TraceContract._.∣ Γ
              ⦆⦅ α ⦆
              Γ′ c
  step-put  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} {xs : Ids} {as : Secrets}
              {p : Predicate}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {y : Id}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              Prelude.InferenceRules.──────────────────────────────────────────────────────────────────────────────────────────────────────
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝
              (BitML.Properties.TraceContract._.⟨
               [ BitML.Properties.TraceContract._.put xs &reveal as if p ⇒ c ] , v
               ⟩at y)
              BitML.Properties.TraceContract._.∣ Γ
              ⦆⦅ BitML.Properties.TraceContract._.put⦅ xs , as , y ⦆ ⦆
              Γ′ c
  step-split
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁}
              {v : Value} {y : Id}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (setoid
               (List (BitML.Contracts.Types.Contract Participant₁ Honest₁))
               Data.List.Membership.Setoid.∈ c)
              (map (λ r → proj₂ r) vcs)
              Prelude.InferenceRules.─────────────────────────────────────────────────────────────────────────
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝
              (BitML.Properties.TraceContract._.⟨
               [ BitML.Properties.TraceContract.split vcs ] , v ⟩at y)
              BitML.Properties.TraceContract._.∣ Γ
              ⦆⦅ BitML.Properties.TraceContract._.split⦅ y ⦆ ⦆
              Γ′ c
  step-timeout
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              {c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁} {x : Id}
              {v : Value}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {i : Prelude.Lists.Indexed.Index c′} →
              BitML.Semantics.Label.cv Participant₁ Honest₁ α ≡ just x →
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝
              (BitML.Properties.TraceContract._.⟨
               [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c′ i ] ,
               v ⟩at x)
              BitML.Properties.TraceContract._.∣ Γ
              ⦆⦅ α ⦆
              Γ′ c
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝
              (BitML.Properties.TraceContract._.⟨ c′ , v ⟩at x)
              BitML.Properties.TraceContract._.∣ Γ
              ⦆⦅ α ⦆
              Γ′ c
  step˘     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c c′ c″ : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (Participant₁ BitML.Properties.Lifetime.↝∗ Honest₁) c c′ →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c′ c″ →
              (Participant₁ BitML.Properties.Lifetime.↝∗ Honest₁) c c″
  step∙˘    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {c c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (Participant₁ BitML.Properties.Lifetime.∙↝∗ Honest₁) ad c →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c c′ →
              (Participant₁ BitML.Properties.Lifetime.∙↝∗ Honest₁) ad c′
  subterms  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  subtermsᵃ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵃ′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵃ⁺
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵈ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵈ′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵈ⁺
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵛ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵛ′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᵛ⁺
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᶜ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᶜ′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subtermsᶜ⁺
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              List (BitML.Contracts.Types.Contract Participant₁ Honest₁)
  subterms′ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  subterms′-names⊆ᵛᶜˢ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
               (BitML.Contracts.Helpers.VCS vcs)) →
              BitML.Contracts.Helpers.names Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.names Participant₁ Honest₁ vcs
  subterms′-names⊆ᶜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d d′ : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
               (BitML.Contracts.Induction.ℂ.C d′)
               | d′) →
              BitML.Contracts.Helpers.names Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.names Participant₁ Honest₁ d′
  subterms′-names⊆ᶜˢ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {ds : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
               (BitML.Contracts.Helpers.CS ds)) →
              BitML.Contracts.Helpers.names Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.names Participant₁ Honest₁ ds
  subterms′-part⊆ᵃ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁
              ad →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subtermsᵃ′ Participant₁ Honest₁ ad) →
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.participants Participant₁ Honest₁
              (ad .BitML.Contracts.Types.Advertisement.G)
  subterms′-part⊆ᵈ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d d′ : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subtermsᵈ′ Participant₁ Honest₁ d′) →
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ d′
  subterms′-part⊆ᵛ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subtermsᵛ′ Participant₁ Honest₁ vcs) →
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ vcs
  subterms′-part⊆ᶜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {ds : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ ds) →
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.participants Participant₁ Honest₁ ds
  subterms′-putComponents⊆ᵛᶜˢ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
               (BitML.Contracts.Helpers.VCS vcs)) →
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ vcs
  subterms′-putComponents⊆ᶜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d d′ : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
               (BitML.Contracts.Induction.ℂ.C d′)
               | d′) →
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ d′
  subterms′-putComponents⊆ᶜˢ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {ds : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ d)
              (BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
               (BitML.Contracts.Helpers.CS ds)) →
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ d ⊆
              BitML.Contracts.Helpers.putComponents Participant₁ Honest₁ ds
  subterms⁺ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Induction.ℂ Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁
  subterms⊆ᵛᶜˢ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {v : Value}
              {ds : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁} →
              (setoid
               (Σ ℕ
                (λ v₁ →
                   List (BitML.Contracts.Types.Contract Participant₁ Honest₁)))
               Data.List.Membership.Setoid.∈ (v , ds))
              vcs →
              ds ⊆
              BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
              (BitML.Contracts.Helpers.VCS vcs)
  subterms⊆ᵛᶜˢ′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁} →
              (setoid
               (List (BitML.Contracts.Types.Contract Participant₁ Honest₁))
               Data.List.Membership.Setoid.∈ c)
              (map (λ r → proj₂ r) vcs) →
              BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ c ⊆
              BitML.Contracts.Helpers.subtermsᵈ′ Participant₁ Honest₁
              (BitML.Contracts.Helpers.split vcs)
  subterms⊆ᵛᶜⁱˢ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {vcis
               : List
                 (Value ×
                  BitML.Contracts.Types.Contracts Participant₁ Honest₁ × Id)} →
              (setoid
               (List (BitML.Contracts.Types.Contract Participant₁ Honest₁))
               Data.List.Membership.Setoid.∈ c)
              (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ vcis))) →
              BitML.Contracts.Helpers.subtermsᶜ′ Participant₁ Honest₁ c ⊆
              BitML.Contracts.Helpers.subtermsᵈ′ Participant₁ Honest₁
              (BitML.Contracts.Helpers.split $
               zip (proj₁ (Prelude.Lists.Core.unzip₃ vcis))
               (proj₁ (proj₂ (Prelude.Lists.Core.unzip₃ vcis))))
  subterms⊆ᶜˢ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ds : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              ds ⊆
              BitML.Contracts.Helpers.subterms′ Participant₁ Honest₁
              (BitML.Contracts.Helpers.CS ds)
  t         : Time
  tdeposits : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              ⦃ _
                : X Prelude.Lists.Collections.has
                  BitML.Contracts.Types.TDepositRef Participant₁ Honest₁ ⦄ →
              X → List (BitML.Contracts.Types.TDepositRef Participant₁ Honest₁)
  time      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁ →
              Time
  timeDecorations
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Contract Participant₁ Honest₁ → List Time
  timeDecorations∘remove≡[]
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              Prelude.Null.Nullable.Null Prelude.Null.Monoid⇒Nullable $
              BitML.Contracts.Helpers.authDecorations Participant₁ Honest₁ $
              BitML.Contracts.Helpers.removeTopDecorations Participant₁ Honest₁ d
  timeout⇒¬control
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              (p
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁
                 stₜ) →
              Prelude.InferenceRules.────────────────────────────────
              (¬
               BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁
               (BitML.Semantics.RuleMatching.innerStepₜ Participant₁ Honest₁ stₜ))
  timeout∙left-base
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (stₜ
               : (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ) α
                 Γₜ′)
              (isT
               : BitML.Semantics.RuleMatching.isTimeout Participant₁ Honest₁ stₜ)
              (isC
               : BitML.Semantics.RuleMatching.isControl Participant₁ Honest₁
                 (BitML.Semantics.RuleMatching.innerStepₜ Participant₁ Honest₁
                  stₜ)) →
              Prelude.InferenceRules.────────────────────────────────────────────────────────
              (BitML.Semantics.Configurations.Helpers.IsBase Participant₁ Honest₁
               $
               (BitML.Semantics.Configurations.Helpers.Split-∣ Participant₁
                Honest₁
                Prelude.Split._-splitsInto-_.∙left)
               ((record
                 { split =
                     λ _ →
                       BitML.Semantics.RuleMatching.innerLₜ Participant₁ Honest₁ stₜ ,
                       BitML.Semantics.Configurations.Types.TimedConfiguration.cfg Γₜ′
                 }
                 Prelude.Split._-splitsInto-_.∙left)
                (BitML.Semantics.RuleMatching.innerStepₜ Participant₁ Honest₁ stₜ)
                ,
                BitML.Semantics.RuleMatching.isControl⇒IsComposite Participant₁
                Honest₁
                (BitML.Semantics.RuleMatching.innerStepₜ Participant₁ Honest₁ stₜ)
                isC))
  toCfg-injective
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Injective≡
              (λ { (BitML.Semantics.Configurations.Types.BaseCfg.`` ad)
                     → BitML.Semantics.Configurations.Types.Configuration.` ad
                 ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x)
                     → BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at x
                 ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x)
                     → BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                       x
                 ; (A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ])
                     → A BitML.Semantics.Configurations.Types.Configuration.auth[ a ]
                 ; BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩
                     → BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                 ; (A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n)
                     → A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n
                 })
  toCfg′-assoc
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l c r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              ((λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  })
               l
               ++
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  })
               c)
              ++
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                 ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                 ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       l
                       ++
                       Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       r
                 })
              r
              ≡
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                 ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                 ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       l
                       ++
                       Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       r
                 })
              l
              ++
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                 ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                 ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       l
                       ++
                       Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       r
                 })
              c
              ++
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                 ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                    x)
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                 ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                     → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                 ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                     → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       l
                       ++
                       Prelude.Coercions._↝_.to
                       (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                        Honest₁)
                       r
                 })
              r
  toCfg≡    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              (β
               : BitML.Semantics.Configurations.Types.BaseCfg Participant₁
                 Honest₁)
              (γ≡
               : γ ≡
                 (λ { (BitML.Semantics.Configurations.Types.BaseCfg.`` ad)
                        → BitML.Semantics.Configurations.Types.Configuration.` ad
                    ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x)
                        → BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at x
                    ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x)
                        → BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                          x
                    ; (A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ])
                        → A BitML.Semantics.Configurations.Types.Configuration.auth[ a ]
                    ; BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩
                        → BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                    ; (A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n)
                        → A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n
                    })
                 β) →
              Prelude.InferenceRules.──────────────────────────────────────────────
              (Prelude.Coercions._⁇_↝_.toBecause
               (BitML.Semantics.Configurations.Helpers.Cfg↝BaseCfg Participant₁
                Honest₁)
               γ
               ≡ β)
  to[Cfg]-inverseʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (γ : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (base-γ
               : BitML.Semantics.Configurations.Helpers.IsBase Participant₁
                 Honest₁ γ) →
              ((λ { (BitML.Semantics.Configurations.Types.BaseCfg.`` ad)
                      → BitML.Semantics.Configurations.Types.Configuration.` ad
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at x
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ])
                      → A BitML.Semantics.Configurations.Types.Configuration.auth[ a ]
                  ; BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n)
                      → A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n
                  })
               ∘
               (λ _ →
                  Prelude.Coercions._⁇_↝_.toBecause
                  (BitML.Semantics.Configurations.Helpers.Cfg↝BaseCfg Participant₁
                   Honest₁)
                  γ))
              γ
              ≡ γ
  to[Cfg]-inverseˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (β
               : BitML.Semantics.Configurations.Types.BaseCfg Participant₁
                 Honest₁) →
              ((λ _ →
                  Prelude.Coercions._⁇_↝_.toBecause
                  (BitML.Semantics.Configurations.Helpers.Cfg↝BaseCfg Participant₁
                   Honest₁)
                  ((λ { (BitML.Semantics.Configurations.Types.BaseCfg.`` ad)
                          → BitML.Semantics.Configurations.Types.Configuration.` ad
                      ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x)
                          → BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at x
                      ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x)
                          → BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                            x
                      ; (A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ])
                          → A BitML.Semantics.Configurations.Types.Configuration.auth[ a ]
                      ; BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩
                          → BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      ; (A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n)
                          → A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n
                      })
                   β))
               ∘
               (λ { (BitML.Semantics.Configurations.Types.BaseCfg.`` ad)
                      → BitML.Semantics.Configurations.Types.Configuration.` ad
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at x
                  ; (BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x)
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ])
                      → A BitML.Semantics.Configurations.Types.Configuration.auth[ a ]
                  ; BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩
                      → BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                  ; (A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n)
                      → A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n
                  }))
              β
              ≡ β
  traceAd   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ₀ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁)
              (BitML.Properties.TraceAd._.` ad) Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Properties.TraceAd._.` ad) Γ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
               Γ₀ BitML.Properties.TraceAd._.at t ]↠ αs)
              (Γ BitML.Properties.TraceAd._.at t′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceAd._.advertise⦅ ad ⦆)
              αs
  traceAd∗  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → ⊤
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ _ has _ ⟩at
                    _)
                     → ⊤
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       l
                       ×
                       Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       r
                 ; _ → ⊥
                 })
              Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Properties.TraceAd._.` ad) Γ →
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
                  Γ₀ BitML.Properties.TraceAd._.at t ]↠ αs)
                 (Γ BitML.Properties.TraceAd._.at t′)) →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceAd.ℍ[C-Advertise]⦅ Participant₁ ↝ Honest₁ ⦆⦅
                 section ⦆
                 section₁ ad)
  traceAuthCommit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ₀ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁)
              (A BitML.Properties.TraceAuthCommit._.auth[
               BitML.Properties.TraceAuthCommit._.♯▷ ad ])
              Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (A BitML.Properties.TraceAuthCommit._.auth[
               BitML.Properties.TraceAuthCommit._.♯▷ ad ])
              Γ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
               Γ₀ BitML.Properties.TraceAuthCommit._.at t ]↠ αs)
              (Γ BitML.Properties.TraceAuthCommit._.at t′) →
              ∃
              (λ Δ →
                 (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
                  Data.List.Membership.Setoid.∈
                  BitML.Properties.TraceAuthCommit._.auth-commit⦅ A , ad , Δ ⦆)
                 αs)
  traceAuthCommit∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → ⊤
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ _ has _ ⟩at
                    _)
                     → ⊤
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       l
                       ×
                       Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       r
                 ; _ → ⊥
                 })
              Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (A BitML.Properties.TraceAuthCommit._.auth[
               BitML.Properties.TraceAuthCommit._.♯▷ ad ])
              Γ →
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
                  Γ₀ BitML.Properties.TraceAuthCommit._.at t ]↠ αs)
                 (Γ BitML.Properties.TraceAuthCommit._.at t′)) →
              ∃
              (λ Δ →
                 BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
                 (λ section section₁ →
                    BitML.Properties.TraceAuthCommit.ℍ[C-AuthCommit]⦅ Participant₁ ↝
                    Honest₁ ⦆⦅ section ⦆
                    section₁ (ad , A , Δ)))
  traceAuthControl
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁} {x : Id}
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {Γ₀ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁)
              (A BitML.Properties.TraceAuthControl._.auth[
               x BitML.Properties.TraceAuthControl._.▷ d ])
              Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (A BitML.Properties.TraceAuthControl._.auth[
               x BitML.Properties.TraceAuthControl._.▷ d ])
              Γ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
               Γ₀ BitML.Properties.TraceAuthControl._.at t ]↠ αs)
              (Γ BitML.Properties.TraceAuthControl._.at t′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceAuthControl._.auth-control⦅ A , x ▷ d ⦆)
              αs
  traceAuthControl∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {x : Id}
              {d : BitML.Contracts.Types.Contract Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → ⊤
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ _ has _ ⟩at
                    _)
                     → ⊤
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       l
                       ×
                       Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       r
                 ; _ → ⊥
                 })
              Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (A BitML.Properties.TraceAuthControl._.auth[
               x BitML.Properties.TraceAuthControl._.▷ d ])
              Γ →
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
                  Γ₀ BitML.Properties.TraceAuthControl._.at t ]↠ αs)
                 (Γ BitML.Properties.TraceAuthControl._.at t′)) →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceAuthControl.ℍ[C-AuthControl]⦅ Participant₁ ↝
                 Honest₁ ⦆⦅ section ⦆
                 section₁ (A , x , d))
  traceAuthInit
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {A : Participant₁} {x : Id}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ₀ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁)
              (A BitML.Properties.TraceAuthInit._.auth[
               x BitML.Properties.TraceAuthInit._.▷ˢ ad ])
              Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (A BitML.Properties.TraceAuthInit._.auth[
               x BitML.Properties.TraceAuthInit._.▷ˢ ad ])
              Γ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
               Γ₀ BitML.Properties.TraceAuthInit._.at t ]↠ αs)
              (Γ BitML.Properties.TraceAuthInit._.at t′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceAuthInit._.auth-init⦅ A , ad , x ⦆)
              αs
  traceAuthInit∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Participant₁} {x : Id}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → ⊤
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ _ has _ ⟩at
                    _)
                     → ⊤
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       l
                       ×
                       Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       r
                 ; _ → ⊥
                 })
              Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (A BitML.Properties.TraceAuthInit._.auth[
               x BitML.Properties.TraceAuthInit._.▷ˢ ad ])
              Γ →
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
                  Γ₀ BitML.Properties.TraceAuthInit._.at t ]↠ αs)
                 (Γ BitML.Properties.TraceAuthInit._.at t′)) →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceAuthInit.ℍ[C-AuthInit]⦅ Participant₁ ↝
                 Honest₁ ⦆⦅ section ⦆
                 section₁ (A , ad , x))
  traceContractₜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {y : Id}
              {Γ₀ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁)
              (BitML.Properties.TraceContract._.⟨ c , v ⟩at y) Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Properties.TraceContract._.⟨ c , v ⟩at y) Γ →
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
                  Γ₀ BitML.Properties.TraceContract._.at t ]↠ αs)
                 (Γ BitML.Properties.TraceContract._.at t′)) →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceContract.∃ℍ[Contract]⦅ Participant₁ ↝ Honest₁
                 ⦆⦅ section ⦆
                 section₁ c)
  traceContract∗
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t₀ : ℕ}
              (init
               : (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → ⊤
                    ; (BitML.Semantics.Configurations.Types.Configuration.⟨ _ has _ ⟩at
                       _)
                        → ⊤
                    ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                        → Prelude.Traces.HasInitial.Initial
                          (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                           Honest₁)
                          l
                          ×
                          Prelude.Traces.HasInitial.Initial
                          (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                           Honest₁)
                          r
                    ; _ → ⊥
                    })
                 Γ₀) →
              t₀ ≡ 0 →
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {y : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t : Time} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Properties.TraceContract._.⟨ c , v ⟩at y) Γ →
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
                  Γ₀ BitML.Properties.TraceContract._.at t₀ ]↠ αs)
                 (Γ BitML.Properties.TraceContract._.at t)) →
              ∃
              (λ ad →
                 BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
                 (BitML.Properties.TraceContract.Ancestor⦅ Participant₁ ↝ Honest₁ ⦆
                  ad c))
  traceInit : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁}
              {Γ₀ Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time} {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {t′ : Time} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Properties.TraceInit._.` ad) Γ₀ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁)
              (BitML.Properties.TraceInit._.` ad) Γ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[
               Γ₀ BitML.Properties.TraceInit._.at t ]↠ αs)
              (Γ BitML.Properties.TraceInit._.at t′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Properties.TraceInit._.init⦅
               ad .BitML.Contracts.Types.Advertisement.G ,
               ad .BitML.Contracts.Types.Advertisement.C ⦆)
              αs
  t′        : Time
  t″        : Time
  v         : Value
  vcs       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁
  vcs′      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁
  vcs″      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.VContracts Participant₁ Honest₁
  viewLeft  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {x = x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {y
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁
  viewLeftₜ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {x = x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {y
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁
  viewRight : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {y
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {x = x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y
  viewRightₜ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {y
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {x = x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁ →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y
  view↔     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁) ⦄
              {x = x₁
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {y
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y
              Prelude.General.↔
              (BitML.Semantics.InferenceRules._—[_]→_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁
  view↔ₜ    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              ⦃ _ = x
                : Prelude.Setoid.Core.ISetoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁) ⦄
              {x = x₁
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : List (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              {y
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ x₁ ]↠
               αs)
              y
              Prelude.General.↔
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.↞[ y ]— αs)
              x₁
  volatile  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.DepositType Participant₁ Honest₁
  volatileDeposits
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              List (BitML.Contracts.Types.DepositRef Participant₁ Honest₁)
  volatileNamesʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ → Ids
  volatileNames⊆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              BitML.Contracts.Helpers.volatileNamesʳ Participant₁ Honest₁ g ⊆
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ g
  volatileParticipants
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Contracts.Types.Precondition Participant₁ Honest₁ →
              List Participant₁
  volatileParticipants⊆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {g : BitML.Contracts.Types.Precondition Participant₁ Honest₁} →
              BitML.Contracts.Helpers.volatileParticipants Participant₁ Honest₁ g
              ⊆ BitML.Contracts.Helpers.participants Participant₁ Honest₁ g
  vs        : Values
  vs′       : Values
  vs″       : Values
  v′        : Value
  v″        : Value
  weaken‼   : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X.ℓ : Level} {X : Set X.ℓ}
              {xs ys : List X} →
              xs ⊆ ys →
              Prelude.Lists.Indexed.Index xs → Prelude.Lists.Indexed.Index ys
  weaken‼′  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X.ℓ : Level} {X : Set X.ℓ}
              {xs ys : List X} {i : Prelude.Lists.Indexed.Index xs}
              (xs⊆ : xs ⊆ ys) →
              (xs Prelude.Lists.Indexed.‼ i) ≡
              (ys Prelude.Lists.Indexed.‼
               BitML.Properties.Lifetime.weaken‼ Participant₁ Honest₁ xs⊆ i)
  weaken↝   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c c′ c″ : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
              c ⊆ c′ →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c c″ →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c′ c″
  weaken∈   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {i : Prelude.Lists.Indexed.Index c} →
              (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               BitML.Contracts.Helpers.∣SELECT.d Participant₁ Honest₁ c i)
              c →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁)
              [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c i ]
              c′ →
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c c′
  withdraw  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ → BitML.Contracts.Types.Contract Participant₁ Honest₁
  withdraw⦅_,_,_⦆
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Value → Id → BitML.Semantics.Label.Label Participant₁ Honest₁
  x         : Id
  xs        : Ids
  xs′       : Ids
  xs″       : Ids
  x′        : Id
  x″        : Id
  x∈vcis⇒   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {x : Id}
              {vcis
               : List
                 (Value ×
                  BitML.Contracts.Types.Contracts Participant₁ Honest₁ × Id)} →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁
               ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
                (map
                 (Prelude.Nary.uncurry₃ $
                  flip BitML.Semantics.Configurations.Helpers.⟨_,_⟩at_)
                 vcis))) →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3
               (Prelude.Lists.Core.unzip₃ vcis))
  x∈vcis⇒¬fresh
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              {vcis
               : List
                 (Value ×
                  BitML.Contracts.Types.Contracts Participant₁ Honest₁ × Id)} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
              (BitML.Semantics.Configurations.Helpers._.⟨ c , v ⟩at x)
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map
                (Prelude.Nary.uncurry₃ $
                 flip BitML.Semantics.Configurations.Helpers.⟨_,_⟩at_)
                vcis)) →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (Prelude.Nary.Focus₃_⟪_⟫_.select₃ Prelude.Nary.N3
               (Prelude.Lists.Core.unzip₃ vcis))
  x∉⇒c∉     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} →
              (Prelude.Membership.M-List Prelude.Membership.HasMembership.∉ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁ Γ) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁)
              (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ
  y         : Id
  y′        : Id
  y″        : Id
  z         : Id
  zoom      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid (BitML.Semantics.Label.Label Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ α)
              αs →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ᵗ Honest₁ ] tr
              (λ section →
                 (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ
                  section)
                 α)
  zoomP     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {P : Pred₀ (BitML.Semantics.Label.Label Participant₁ Honest₁)}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              Any P αs →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ᵗ Honest₁ ] tr
              (λ Γₜ₁ Γₜ′₁ →
                 ∃
                 (λ α →
                    P α ×
                    (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ₜ Γₜ₁) α
                    Γₜ′₁))
  z′        : Id
  z″        : Id
  ||_       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              List
              (BitML.Semantics.Configurations.Types.Configuration Participant₁
               Honest₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  ¬Delay    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {δ : Time}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]↛ Γ)
              BitML.Properties.Helpers._.delay⦅ δ ⦆ Γ′
  ¬base×composite
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (Γ
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁) →
              ¬
              (BitML.Semantics.Configurations.Helpers.IsBase Participant₁ Honest₁
               Γ
               ×
               BitML.Semantics.Configurations.Helpers.IsComposite Participant₁
               Honest₁ Γ)
  ¬delay    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {δ : Time}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              ¬
              (Participant₁ BitML.Semantics.InferenceRules.—[ Honest₁ ]→ Γ)
              BitML.Semantics.RuleMatching._.delay⦅ δ ⦆ Γ′
  ×∈ᵗ⇒×∈    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t′ : Time}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid
               (Σ
                (BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
                (λ v →
                   BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁))
               Data.List.Membership.Setoid.∈
               ((Γ BitML.Properties.Helpers._.at t) ,
                (Γ′ BitML.Properties.Helpers._.at t′)))
              (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
               tr) →
              (setoid
               (Σ
                (BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
                (λ v →
                   BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁))
               Data.List.Membership.Setoid.∈ (Γ , Γ′))
              (BitML.Properties.Helpers.allTransitions Participant₁ Honest₁ tr)
  ×∈⇒×∈ᵗ    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid
               (Σ
                (BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
                (λ v →
                   BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁))
               Data.List.Membership.Setoid.∈ (Γ , Γ′))
              (BitML.Properties.Helpers.allTransitions Participant₁ Honest₁ tr) →
              ∃
              (λ t →
                 ∃
                 (λ t′ →
                    (setoid
                     (Σ
                      (BitML.Semantics.Configurations.Types.TimedConfiguration
                       Participant₁ Honest₁)
                      (λ v →
                         BitML.Semantics.Configurations.Types.TimedConfiguration
                         Participant₁ Honest₁))
                     Data.List.Membership.Setoid.∈
                     ((Γ BitML.Properties.Helpers._.at t) ,
                      (Γ′ BitML.Properties.Helpers._.at t′)))
                    (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
                     tr)))
  Γ         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Γ¹        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  Γ¹′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  Γ¹″       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  Γ′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Γ″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Γ₀        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Γ₀′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Γ₀″       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Γₜ        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Γₜ′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Γₜ″       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Γₜ₀       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Γₜ₀′      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Γₜ₀″      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Δ         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Δ¹        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  Δ¹′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  Δ¹″       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
  Δ′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Δ″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  Δₜ        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Δₜ′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  Δₜ″       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.TimedConfiguration
              Participant₁ Honest₁
  α         : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  αs        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Labels Participant₁ Honest₁
  αs′       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Labels Participant₁ Honest₁
  α′        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  α″        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Label.Label Participant₁ Honest₁
  δ         : Time
  δ′        : Time
  δ″        : Time
  ℍ[C-Advertise]⦅_↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Contracts.Types.Ad Participant₁ Honest₁ → Set
  ℍ[C-AuthCommit]⦅_↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Contracts.Types.Ad Participant₁ Honest₁ ×
              Participant₁ × List (Secret × Maybe ℕ) →
              Set
  ℍ[C-AuthControl]⦅_↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              Participant₁ ×
              Id × BitML.Contracts.Types.Contract Participant₁ Honest₁ →
              Set
  ℍ[C-AuthInit]⦅_↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              Participant₁ × BitML.Contracts.Types.Ad Participant₁ Honest₁ × Id →
              Set
  ℍ[C-Init]⇒∃ℍ[C-AuthInit]
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {ad : BitML.Contracts.Types.Advertisement Participant₁ Honest₁} →
              (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → ⊤
                 ; (BitML.Semantics.Configurations.Types.Configuration.⟨ _ has _ ⟩at
                    _)
                     → ⊤
                 ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                     → Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       l
                       ×
                       Prelude.Traces.HasInitial.Initial
                       (BitML.Semantics.Configurations.Helpers.Initial-Cfg Participant₁
                        Honest₁)
                       r
                 ; _ → ⊥
                 })
              (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg Γₜ)
              ×
              BitML.Semantics.Configurations.Types.TimedConfiguration.time Γₜ ≡
              0 →
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceInit.ℍ[C-Init]⦅ Participant₁ ↝ Honest₁ ⦆⦅
                 section ⦆
                 section₁ ad) →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr
              (λ section section₁ →
                 BitML.Properties.TraceInit.∃ℍ[C-AuthInit]⦅ Participant₁ ↝ Honest₁
                 ⦆⦅ section ⦆
                 section₁ ad)
              ×
              BitML.Contracts.Validity.ValidAdvertisement Participant₁ Honest₁ ad
              ×
              (setoid (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ ad)
              (BitML.Semantics.Configurations.Helpers.advertisements Participant₁
               Honest₁ tr)
  ℍ[C-Init]⦅_↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Contracts.Types.Ad Participant₁ Honest₁ → Set
  ℍ[Contract]⦅_—[_]↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Label.Label Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ → Set
  ℍ⇒Lifetime
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c′ : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {α : BitML.Semantics.Label.Label Participant₁ Honest₁}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {i : Prelude.Lists.Indexed.Index c′} →
              BitML.Properties.TraceContract.ℍ[Contract]⦅ Participant₁ —[ Honest₁
              ]↝
              (BitML.Properties.TraceContract._.⟨
               [ BitML.Contracts.Helpers.∣SELECT.d∗ Participant₁ Honest₁ c′ i ] ,
               v ⟩at x)
              BitML.Properties.TraceContract._.∣ Γ
              ⦆⦅ α ⦆
              Γ′ c
              Prelude.InferenceRules.──────────────────
              (Participant₁ BitML.Properties.Lifetime.↝ Honest₁) c′ c
  ↦-∈       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {ds : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {R : BitML.Contracts.Types.Contract Participant₁ Honest₁ → Set} →
              ({d : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
               (setoid (BitML.Contracts.Types.Contract Participant₁ Honest₁)
                Data.List.Membership.Setoid.∈ d)
               ds →
               BitML.Contracts.Helpers.subterms⁺ Participant₁ Honest₁
               (BitML.Contracts.Helpers.C d)
               Prelude.Lists.Mappings.↦′ R) →
              BitML.Contracts.Helpers.subterms⁺ Participant₁ Honest₁
              (BitML.Contracts.Helpers.CS ds)
              Prelude.Lists.Mappings.↦′ R
  ↦-∈ᵛ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {vcs : BitML.Contracts.Types.VContracts Participant₁ Honest₁}
              {R : BitML.Contracts.Types.Contract Participant₁ Honest₁ → Set} →
              ({cs : BitML.Contracts.Types.Contracts Participant₁ Honest₁} →
               (setoid (BitML.Contracts.Types.Contracts Participant₁ Honest₁)
                Data.List.Membership.Setoid.∈ cs)
               (map (λ r → proj₂ r) vcs) →
               BitML.Contracts.Helpers.subterms⁺ Participant₁ Honest₁
               (BitML.Contracts.Helpers.CS cs)
               Prelude.Lists.Mappings.↦′ R) →
              BitML.Contracts.Helpers.subterms⁺ Participant₁ Honest₁
              (BitML.Contracts.Helpers.VCS vcs)
              Prelude.Lists.Mappings.↦′ R
  ↭-sym∘≈⇒namesʳ↭
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (Γ≈
               : (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ Γ′) →
              ↭-sym
              (BitML.Semantics.Configurations.Helpers.≈⇒namesʳ↭ Participant₁
               Honest₁ Γ≈)
              ≡
              BitML.Semantics.Configurations.Helpers.≈⇒namesʳ↭ Participant₁
              Honest₁ (↭-sym Γ≈)
  ↭-sym∘≈⇒names↭
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (Γ≈
               : (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ Γ′) →
              ↭-sym
              (BitML.Semantics.Configurations.Helpers.≈⇒names↭ Participant₁
               Honest₁ Γ≈)
              ≡
              BitML.Semantics.Configurations.Helpers.≈⇒names↭ Participant₁
              Honest₁ (↭-sym Γ≈)
  ∃-splitTraceˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″ Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {X : Set}
              {P
               : X →
                 Rel₀
                 (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                  αs)
                 Γₜ″)
              (xy∈
               : (setoid
                  (Σ
                   (BitML.Semantics.Configurations.Types.TimedConfiguration
                    Participant₁ Honest₁)
                   (λ v →
                      BitML.Semantics.Configurations.Types.TimedConfiguration
                      Participant₁ Honest₁))
                  Data.List.Membership.Setoid.∈ (Γₜ , Γₜ′))
                 (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁ tr))
              {x x′ : X} →
              P x ⇒² P x′ →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ]
              (BitML.Properties.Helpers.splitTraceˡ Participant₁ Honest₁ tr xy∈)
              (P x) →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr (P x′)
  ∃-splitTraceˡ′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″ Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {P Q
               : Rel₀
                 (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                  αs)
                 Γₜ″)
              (xy∈
               : (setoid
                  (Σ
                   (BitML.Semantics.Configurations.Types.TimedConfiguration
                    Participant₁ Honest₁)
                   (λ v →
                      BitML.Semantics.Configurations.Types.TimedConfiguration
                      Participant₁ Honest₁))
                  Data.List.Membership.Setoid.∈ (Γₜ , Γₜ′))
                 (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
                  tr)) →
              P ⇒² Q →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ]
              (BitML.Properties.Helpers.splitTraceˡ Participant₁ Honest₁ tr xy∈)
              P →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr Q
  ∃-weakenP : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {P Q
               : Rel₀
                 (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              P ⇒² Q →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr P →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr Q
  ∃-weaken∈ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′ Δₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs′ : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Δₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {P
               : Rel₀
                 (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′)
              (tr′
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Δₜ ]↠
                  αs′)
                 Δₜ′) →
              (Participant₁ BitML.Properties.Helpers.⊆ᵗʳ Honest₁) tr tr′ →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr P →
              BitML.Properties.Helpers.∃[ Participant₁ ∋ Honest₁ ] tr′ P
  ∃[_∋_]    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              Rel₀
              (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁) →
              Set
  ∃[_∋_]′   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              ((BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                αs)
               Γₜ′ →
               Rel₀
               (BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)) →
              Set
  ∃[_∋ᵗ_]   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              Rel₀
              (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁) →
              Set
  ∃[_∋ᵗ_]′  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
               Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
               αs)
              Γₜ′ →
              ((BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                αs)
               Γₜ′ →
               Rel₀
               (BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁)) →
              Set
  ∃ℍ[C-AuthInit]⦅_↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Contracts.Types.Ad Participant₁ Honest₁ → Set
  ∃ℍ[Contract]⦅_↝_⦆⦅_⦆
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁ →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ → Set
  ∅ᵗ        : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              BitML.Semantics.Configurations.Types.Cfgᵗ Participant₁ Honest₁
  ∅ᶜ        : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  ∈-Cfg′    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (γ Γ
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (γ∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 γ Γ) →
              (setoid
               (BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈
               Prelude.Coercions._⁇_↝_.toBecause
               (BitML.Semantics.Configurations.Helpers.Cfg↝BaseCfg Participant₁
                Honest₁)
               γ)
              ((λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  })
               Γ)
  ∈-allTransitionsᵗ⁻
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″ Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                  αs)
                 Γₜ″) →
              (setoid
               (Σ
                (BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁)
                (λ v →
                   BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁))
               Data.List.Membership.Setoid.∈ (Γₜ , Γₜ′))
              (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
               tr) →
              (setoid
               (BitML.Semantics.Configurations.Types.TimedConfiguration
                Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ Γₜ)
              (BitML.Properties.Helpers.allStatesᵗ Participant₁ Honest₁ tr)
              ×
              (setoid
               (BitML.Semantics.Configurations.Types.TimedConfiguration
                Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ Γₜ′)
              (BitML.Properties.Helpers.allStatesᵗ Participant₁ Honest₁ tr)
  ∈-allTransitions⁻
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid
               (Σ
                (BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
                (λ v →
                   BitML.Semantics.Configurations.Types.Configuration Participant₁
                   Honest₁))
               Data.List.Membership.Setoid.∈ (Γ , Γ′))
              (BitML.Properties.Helpers.allTransitions Participant₁ Honest₁ tr) →
              (setoid
               (BitML.Semantics.Configurations.Types.Configuration Participant₁
                Honest₁)
               Data.List.Membership.Setoid.∈ Γ)
              (BitML.Properties.Helpers.allStates Participant₁ Honest₁ tr)
              ×
              (setoid
               (BitML.Semantics.Configurations.Types.Configuration Participant₁
                Honest₁)
               Data.List.Membership.Setoid.∈ Γ′)
              (BitML.Properties.Helpers.allStates Participant₁ Honest₁ tr)
  ∈-collect-++⁺ʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              (l
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              (r : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              {x : X}
              ⦃ I
                : BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄ →
              (setoid X Data.List.Membership.Setoid.∈ x)
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I)
               r) →
              (setoid X Data.List.Membership.Setoid.∈ x)
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I)
               (l BitML.Semantics.Configurations.Helpers._.∣ r))
  ∈-collect-++⁺ˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              (l : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x : X}
              ⦃ I
                : BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄ →
              (setoid X Data.List.Membership.Setoid.∈ x)
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I)
               l) →
              (setoid X Data.List.Membership.Setoid.∈ x)
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I)
               (l BitML.Semantics.Configurations.Helpers._.∣ r))
  ∈-collect-++⁻
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {X : Set}
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x : X}
              ⦃ I
                : BitML.Semantics.Configurations.Types.BaseCfg Participant₁ Honest₁
                  Prelude.Lists.Collections.has X ⦄ →
              (setoid X Data.List.Membership.Setoid.∈ x)
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I)
               (l BitML.Semantics.Configurations.Helpers._.∣ r)) →
              (setoid X Data.List.Membership.Setoid.∈ x)
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I) l)
              ⊎
              (setoid X Data.List.Membership.Setoid.∈ x)
              (BitML.Semantics.Configurations.Helpers.collectFromBase
               Participant₁ Honest₁ (Prelude.Lists.Collections._has_.collect I) r)
  ∈-ids-++⁺ʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Contracts.Helpers.ids Participant₁ Honest₁ r ⊆
              BitML.Contracts.Helpers.ids Participant₁ Honest₁
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ∈-ids-++⁺ˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Contracts.Helpers.ids Participant₁ Honest₁ l ⊆
              BitML.Contracts.Helpers.ids Participant₁ Honest₁
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ∈-ids-++⁻ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x : Id} →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁
               (l BitML.Semantics.Configurations.Helpers._.∣ r)) →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁ l)
              ⊎
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.ids Participant₁ Honest₁ r)
  ∈-resp-↭∘c∈⇒x∈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              (Γ Γ′
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (Γ≈
               : (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ Γ′)
              (c∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ) →
              (L.Perm.∈-resp-↭
               (BitML.Semantics.Configurations.Helpers.≈⇒namesʳ↭ Participant₁
                Honest₁ Γ≈)
               ∘ BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ)
              c∈
              ≡
              (BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ′ ∘
               BitML.Semantics.Configurations.Helpers.∈ᶜ-resp-≈ Participant₁
               Honest₁ Γ≈)
              c∈
  ∈-resp-↭∘c∈⇒x∈∘∈ᶜ-resp-≈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              (Γ Γ′
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (Γ≈
               : (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ Γ′)
              (c∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ) →
              (L.Perm.∈-resp-↭
               (BitML.Semantics.Configurations.Helpers.≈⇒namesʳ↭ Participant₁
                Honest₁ (↭-sym Γ≈))
               ∘
               BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ′ ∘
               BitML.Semantics.Configurations.Helpers.∈ᶜ-resp-≈ Participant₁
               Honest₁ Γ≈)
              c∈
              ≡ BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ c∈
  ∈-resp-↭∘c∈⇒x∈∘∈ᶜ-resp-≈˘
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              (Γ Γ′
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (Γ≈
               : (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ′ Γ)
              (c∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ) →
              (L.Perm.∈-resp-↭
               (BitML.Semantics.Configurations.Helpers.≈⇒namesʳ↭ Participant₁
                Honest₁ Γ≈)
               ∘
               BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ′ ∘
               BitML.Semantics.Configurations.Helpers.∈ᶜ-resp-≈ Participant₁
               Honest₁ (↭-sym Γ≈))
              c∈
              ≡ BitML.Properties.Helpers.c∈⇒x∈ Participant₁ Honest₁ Γ c∈
  ∈-resp-↭∘∈-Cfg′
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (γ Γ Γ′
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (Γ≈
               : (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ Γ′)
              (γ∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 γ Γ) →
              (BitML.Semantics.Configurations.Helpers.∈-Cfg′ Participant₁ Honest₁
               γ Γ′
               ∘
               BitML.Semantics.Configurations.Helpers.∈ᶜ-resp-≈ Participant₁
               Honest₁ Γ≈)
              γ∈
              ≡
              (L.Perm.∈-resp-↭ Γ≈ ∘
               BitML.Semantics.Configurations.Helpers.∈-Cfg′ Participant₁ Honest₁
               γ Γ)
              γ∈
  ∈-resp-≈  : (Participant₁ : Set) ⦃ _ : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {Z Z′ A : Set}
              ⦃ _ = z : A Prelude.Lists.Collections.has Z ⦄
              ⦃ _ = z₁ : Prelude.Setoid.Core.ISetoid A ⦄
              (f
               : {X : Set} ⦃ _ : X Prelude.Lists.Collections.has Z ⦄ →
                 X → List Z′) →
              ({a a′ : A} →
               (z₁ Prelude.Setoid.Core.ISetoid.≈ a) a′ →
               a Prelude.Lists.Collections._._.↭⦅ f ⦆ a′) →
              (z₂ : Z′) →
              (λ ◆ → (setoid Z′ Data.List.Membership.Setoid.∈ z₂) (f ◆)) Respects
              Prelude.Setoid.Core.ISetoid._≈_ z₁
  ∈-secrets-++⁺ʳ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Contracts.Helpers.secrets Participant₁ Honest₁ r ⊆
              BitML.Contracts.Helpers.secrets Participant₁ Honest₁
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ∈-secrets-++⁺ˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              BitML.Contracts.Helpers.secrets Participant₁ Honest₁ l ⊆
              BitML.Contracts.Helpers.secrets Participant₁ Honest₁
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ∈-secrets-++⁻
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              {x : Id} →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.secrets Participant₁ Honest₁
               (l BitML.Semantics.Configurations.Helpers._.∣ r)) →
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.secrets Participant₁ Honest₁ l)
              ⊎
              (setoid String Data.List.Membership.Setoid.∈ x)
              (BitML.Contracts.Helpers.secrets Participant₁ Honest₁ r)
  ∈ads-resp-≈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (z₁ : BitML.Contracts.Types.Advertisement Participant₁ Honest₁) →
              (λ ◆ →
                 (setoid (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)
                  Data.List.Membership.Setoid.∈ z₁)
                 (BitML.Semantics.Configurations.Helpers.advertisements Participant₁
                  Honest₁ ◆))
              Respects
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
  ∈deposits-resp-≈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (z₁ : BitML.Contracts.Types.DepositRef Participant₁ Honest₁) →
              (λ ◆ →
                 (setoid (BitML.Contracts.Types.DepositRef Participant₁ Honest₁)
                  Data.List.Membership.Setoid.∈ z₁)
                 (BitML.Contracts.Helpers.deposits Participant₁ Honest₁ ◆))
              Respects
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
  ∈names-resp-≈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) (z₁ : Name) →
              (λ ◆ →
                 (setoid Name Data.List.Membership.Setoid.∈ z₁)
                 (BitML.Contracts.Helpers.names Participant₁ Honest₁ ◆))
              Respects
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
  ∈namesʳ-resp-≈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) (z₁ : String) →
              (λ ◆ →
                 (setoid String Data.List.Membership.Setoid.∈ z₁)
                 (BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ ◆))
              Respects
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
  ∈namesˡ-resp-≈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) (z₁ : Secret) →
              (λ ◆ →
                 (setoid Secret Data.List.Membership.Setoid.∈ z₁)
                 (BitML.Contracts.Helpers.namesˡ Participant₁ Honest₁ ◆))
              Respects
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
  ∈ᵗ⇒∈      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {t : Time}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid
               (BitML.Semantics.Configurations.Types.TimedConfiguration
                Participant₁ Honest₁)
               Data.List.Membership.Setoid.∈ (Γ BitML.Properties.Helpers._.at t))
              (BitML.Properties.Helpers.allStatesᵗ Participant₁ Honest₁ tr) →
              (setoid
               (BitML.Semantics.Configurations.Types.Configuration Participant₁
                Honest₁)
               Data.List.Membership.Setoid.∈ Γ)
              (BitML.Properties.Helpers.allStates Participant₁ Honest₁ tr)
  ∈ᶜ-++⁺ʳ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (l
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              (r
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              r →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ∈ᶜ-++⁺ˡ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (l : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              l →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ∈ᶜ-++⁻    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (l r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              (l BitML.Semantics.Configurations.Helpers._.∣ r) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              l
              ⊎
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              r
  ∈ᶜ-resp-≈ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′ Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ Γ′ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              Γ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) Γ₀
              Γ′
  ∈ᶜ-resp-≈∘∈ᶜ-resp-≈
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {c : BitML.Contracts.Types.Contracts Participant₁ Honest₁}
              {v : Value} {x : Id}
              (Γ Γ′
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (Γ≈
               : (_↭_ on
                  (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                     ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                     ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                        x)
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                     ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                         → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                     ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                         → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                     ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                         → Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           l
                           ++
                           Prelude.Coercions._↝_.to
                           (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                            Honest₁)
                           r
                     }))
                 Γ Γ′)
              (c∈
               : (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁)
                 (BitML.Properties.Helpers._.⟨ c , v ⟩at x) Γ) →
              (BitML.Semantics.Configurations.Helpers.∈ᶜ-resp-≈ Participant₁
               Honest₁ (↭-sym Γ≈)
               ∘
               BitML.Semantics.Configurations.Helpers.∈ᶜ-resp-≈ Participant₁
               Honest₁ Γ≈)
              c∈
              ≡ c∈
  ∈ᶜ-||⇒⊆ᶜ  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Set}
              {f
               : A →
                 BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁}
              {x : A} (xs : List A) →
              (setoid A Data.List.Membership.Setoid.∈ x) xs →
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁)
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map f xs))
              Γ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁)
              (f x) Γ
  ∈ᶜ⇒IsBase : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {γ Γ
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁} →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∈ᶜ Honest₁) γ
              Γ →
              BitML.Semantics.Configurations.Helpers.IsBase Participant₁ Honest₁
              γ
  ∈⇒∈ᵗ      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′) →
              (setoid
               (BitML.Semantics.Configurations.Types.Configuration Participant₁
                Honest₁)
               Data.List.Membership.Setoid.∈ Γ)
              (BitML.Properties.Helpers.allStates Participant₁ Honest₁ tr) →
              ∃
              (λ t →
                 (setoid
                  (BitML.Semantics.Configurations.Types.TimedConfiguration
                   Participant₁ Honest₁)
                  Data.List.Membership.Setoid.∈ (Γ BitML.Properties.Helpers._.at t))
                 (BitML.Properties.Helpers.allStatesᵗ Participant₁ Honest₁ tr))
  ∉ᶜ-resp-≈ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′ Γ₀
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ Γ′ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁) Γ₀
              Γ →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁) Γ₀
              Γ′
  ∉ᶜ-||     : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {A : Set}
              {f
               : A →
                 BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁} →
              ({x : A} →
               (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁) Γ
               (f x)) →
              (xs : List A) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.∉ᶜ Honest₁) Γ
              ((BitML.Semantics.Configurations.Types.|| Participant₁) Honest₁
               (map f xs))
  ∣_∣       : Secret → Arith
  ≈ᵗ-refl   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁} →
              BitML.Semantics.Configurations.Types.TimedConfiguration.time Γₜ ≡
              BitML.Semantics.Configurations.Types.TimedConfiguration.time Γₜ
              ×
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg Γₜ)
              (BitML.Semantics.Configurations.Types.TimedConfiguration.cfg Γₜ)
  ≈ᶜ-assoc  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              (l c r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              (l BitML.Semantics.Configurations.Helpers._.∣
               (c BitML.Semantics.Configurations.Helpers._.∣ r))
              ((l BitML.Semantics.Configurations.Helpers._.∣ c)
               BitML.Semantics.Configurations.Helpers._.∣ r)
  ≈⇒ads↭    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ Γ′ →
              Γ Prelude.Lists.Collections._._.↭⦅
              BitML.Semantics.Configurations.Helpers.advertisements Participant₁
              Honest₁
              ⦆ Γ′
  ≈⇒deposits↭
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ Γ′ →
              Γ Prelude.Lists.Collections._._.↭⦅
              BitML.Contracts.Helpers.deposits Participant₁ Honest₁ ⦆ Γ′
  ≈⇒namesʳ↭ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ Γ′ →
              Γ Prelude.Lists.Collections._._.↭⦅
              BitML.Contracts.Helpers.namesʳ Participant₁ Honest₁ ⦆ Γ′
  ≈⇒namesˡ↭ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ Γ′ →
              Γ Prelude.Lists.Collections._._.↭⦅
              BitML.Contracts.Helpers.namesˡ Participant₁ Honest₁ ⦆ Γ′
  ≈⇒names↭  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γ Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁} →
              (_↭_ on
               (λ { BitML.Semantics.Configurations.Types.Configuration.∅ᶜ → `∅ᶜ
                  ; (BitML.Semantics.Configurations.Types.Configuration.` ad)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`` ad ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ c , v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ c , v ⟩at x ]
                  ; (BitML.Semantics.Configurations.Types.Configuration.⟨ A has v ⟩at
                     x)
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A has v ⟩at x ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.auth[ a ])
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`auth[ a ] ]
                  ; BitML.Semantics.Configurations.Types.Configuration.⟨ A ∶ s ♯ mn ⟩
                      → [ BitML.Semantics.Configurations.Types.BaseCfg.`⟨ A ∶ s ♯ mn ⟩ ]
                  ; (A BitML.Semantics.Configurations.Types.Configuration.∶ s ♯ n)
                      → [ A BitML.Semantics.Configurations.Types.BaseCfg.`∶ s ♯ n ]
                  ; (l BitML.Semantics.Configurations.Types.Configuration.∣ r)
                      → Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        l
                        ++
                        Prelude.Coercions._↝_.to
                        (BitML.Semantics.Configurations.Types.Cfg↝Cfg′ Participant₁
                         Honest₁)
                        r
                  }))
              Γ Γ′ →
              Γ Prelude.Lists.Collections._._.↭⦅
              BitML.Contracts.Helpers.names Participant₁ Honest₁ ⦆ Γ′
  ≺-splitTraceˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″ Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                  αs)
                 Γₜ″)
              (xy∈
               : (setoid
                  (Σ
                   (BitML.Semantics.Configurations.Types.TimedConfiguration
                    Participant₁ Honest₁)
                   (λ v →
                      BitML.Semantics.Configurations.Types.TimedConfiguration
                      Participant₁ Honest₁))
                  Data.List.Membership.Setoid.∈ (Γₜ , Γₜ′))
                 (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
                  tr)) →
              length (take (F.toℕ $ L.Any.index xy∈) αs) Prelude.Measurable._.≺
              length αs
  ⊆ˢ-splitTraceˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″ Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                  αs)
                 Γₜ″)
              (xy∈
               : (setoid
                  (Σ
                   (BitML.Semantics.Configurations.Types.TimedConfiguration
                    Participant₁ Honest₁)
                   (λ v →
                      BitML.Semantics.Configurations.Types.TimedConfiguration
                      Participant₁ Honest₁))
                  Data.List.Membership.Setoid.∈ (Γₜ , Γₜ′))
                 (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
                  tr)) →
              (Participant₁ BitML.Properties.Helpers.⊆ˢ Honest₁)
              (BitML.Properties.Helpers.splitTraceˡ Participant₁ Honest₁ tr xy∈)
              tr
  ⊆ˢ⇒ads⊆   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′ Δₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs′ : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Δₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′)
              (tr′
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Δₜ ]↠
                  αs′)
                 Δₜ′) →
              (Participant₁ BitML.Properties.Helpers.⊆ˢ Honest₁) tr tr′ →
              tr Prelude.Lists.Collections._._.⊆⦅
              BitML.Semantics.Configurations.Helpers.advertisements Participant₁
              Honest₁
              ⦆ tr′
  ⊆ˢ⇒names⊆ : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ′ Δₜ
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs′ : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Δₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ ]↠
                  αs)
                 Γₜ′)
              (tr′
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Δₜ ]↠
                  αs′)
                 Δₜ′) →
              (Participant₁ BitML.Properties.Helpers.⊆ˢ Honest₁) tr tr′ →
              tr Prelude.Lists.Collections._._.⊆⦅
              BitML.Contracts.Helpers.names Participant₁ Honest₁ ⦆ tr′
  ⊆ᵗʳ-splitTraceˡ
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Γₜ₀
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              {αs : BitML.Semantics.Label.Labels Participant₁ Honest₁}
              {Γₜ″ Γₜ Γₜ′
               : BitML.Semantics.Configurations.Types.TimedConfiguration
                 Participant₁ Honest₁}
              (tr
               : (BitML.Semantics.InferenceRules._—[_]→ₜ_ Participant₁ Honest₁
                  Prelude.Closures.UpToLabelledReflexiveTransitiveClosure.—[ Γₜ₀ ]↠
                  αs)
                 Γₜ″)
              (xy∈
               : (setoid
                  (Σ
                   (BitML.Semantics.Configurations.Types.TimedConfiguration
                    Participant₁ Honest₁)
                   (λ v →
                      BitML.Semantics.Configurations.Types.TimedConfiguration
                      Participant₁ Honest₁))
                  Data.List.Membership.Setoid.∈ (Γₜ , Γₜ′))
                 (BitML.Properties.Helpers.allTransitionsᵗ Participant₁ Honest₁
                  tr)) →
              (Participant₁ BitML.Properties.Helpers.⊆ᵗʳ Honest₁)
              (BitML.Properties.Helpers.splitTraceˡ Participant₁ Honest₁ tr xy∈)
              tr
  ⊆ᶜ-++⁺ʳ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Δ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (l
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁)
              (r
               : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁) Δ
              r →
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁) Δ
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ⊆ᶜ-++⁺ˡ   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁)
              {Δ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              (l : BitML.Semantics.Configurations.Types.Cfg Participant₁ Honest₁)
              (r
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁) →
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁) Δ
              l →
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁) Δ
              (l BitML.Semantics.Configurations.Helpers._.∣ r)
  ⊆ᶜ-refl   : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Reflexive
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁)
  ⊆ᶜ-trans  : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Transitive
              (Participant₁ BitML.Semantics.Configurations.Helpers.⊆ᶜ Honest₁)
  ♯▷_       : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁ →
              BitML.Semantics.Action.Action Participant₁ Honest₁
  ⟦_⟧_      : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Predicate →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Maybe Bool
  ⟦_⟧ᵃʳ_    : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Arith →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁ →
              Maybe ℤ
  ⟨_,_⟩at_  : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              BitML.Contracts.Types.Contracts Participant₁ Honest₁ →
              Value →
              Id →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  ⟨_has_⟩at_
            : {Participant = Participant₁ : Set} ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Value →
              Id →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  ⟨_∶_♯_⟩   : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁} →
              Participant₁ →
              Secret →
              Maybe ℕ →
              BitML.Semantics.Configurations.Types.Configuration Participant₁
              Honest₁
  ⟨_⟩_      : {Participant = Participant₁ : Set}
              ⦃ _ = z : DecEq Participant₁ ⦄
              {Honest = Honest₁ : List⁺ Participant₁}
              (G₁ : BitML.Contracts.Types.Precondition Participant₁ Honest₁)
              (C₁ : BitML.Contracts.Types.Contracts Participant₁ Honest₁) →
              BitML.Contracts.Types.Advertisement Participant₁ Honest₁
  ⟨⟩∘∣-injective
            : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) {v : Value} {x : Id}
              {Γ
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {v′ : Value} {x′ : Id}
              {Γ′
               : BitML.Semantics.Configurations.Types.Configuration Participant₁
                 Honest₁}
              {d d′ : BitML.Contracts.Types.Contract Participant₁ Honest₁} →
              (((BitML.Semantics.RuleMatching._.⟨ [ d ] , v ⟩at x)
                BitML.Semantics.RuleMatching._.∣ Γ)
               ≡
               ((BitML.Semantics.RuleMatching._.⟨ [ d′ ] , v′ ⟩at x′)
                BitML.Semantics.RuleMatching._.∣ Γ′))
              Prelude.InferenceRules.─────────────────────────────────────────────────
              (d ≡ d′ × v ≡ v′ × x ≡ x′ × Γ ≡ Γ′)
  𝕍Ad       : (Participant₁ : Set) ⦃ _ = z : DecEq Participant₁ ⦄
              (Honest₁ : List⁺ Participant₁) →
              Prelude.Validity.Validable
              (BitML.Contracts.Types.Advertisement Participant₁ Honest₁)

